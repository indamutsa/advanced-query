/*
 * generated by Xtext 2.25.0
 */
package com.arsene.query.serializer;

import com.arsene.query.queryDsl.ArtifactType;
import com.arsene.query.queryDsl.BoolConstant;
import com.arsene.query.queryDsl.Comparison;
import com.arsene.query.queryDsl.Dsl;
import com.arsene.query.queryDsl.DslField;
import com.arsene.query.queryDsl.DslVar;
import com.arsene.query.queryDsl.Filter;
import com.arsene.query.queryDsl.FilterExp;
import com.arsene.query.queryDsl.FilterKeyword;
import com.arsene.query.queryDsl.FullTextSearch;
import com.arsene.query.queryDsl.IntConstant;
import com.arsene.query.queryDsl.Metamodel;
import com.arsene.query.queryDsl.MetamodelField;
import com.arsene.query.queryDsl.MetamodelVar;
import com.arsene.query.queryDsl.MicroSyntax;
import com.arsene.query.queryDsl.Model;
import com.arsene.query.queryDsl.ModelField;
import com.arsene.query.queryDsl.ModelQuery;
import com.arsene.query.queryDsl.ModelVar;
import com.arsene.query.queryDsl.Operator;
import com.arsene.query.queryDsl.Project;
import com.arsene.query.queryDsl.ProjectField;
import com.arsene.query.queryDsl.ProjectParam;
import com.arsene.query.queryDsl.QExp;
import com.arsene.query.queryDsl.Qattribute;
import com.arsene.query.queryDsl.QualityMetric;
import com.arsene.query.queryDsl.QueryDslPackage;
import com.arsene.query.queryDsl.QueryModel;
import com.arsene.query.queryDsl.StringConstant;
import com.arsene.query.queryDsl.TransParam;
import com.arsene.query.queryDsl.Transformable;
import com.arsene.query.queryDsl.User;
import com.arsene.query.queryDsl.UserField;
import com.arsene.query.queryDsl.UserParam;
import com.arsene.query.queryDsl.Variable;
import com.arsene.query.queryDsl.VariableRef;
import com.arsene.query.queryDsl.Workspace;
import com.arsene.query.queryDsl.WorkspaceField;
import com.arsene.query.queryDsl.WorkspaceParam;
import com.arsene.query.services.QueryDslGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class QueryDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private QueryDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == QueryDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QueryDslPackage.ARTIFACT_TYPE:
				sequence_ArtifactType(context, (ArtifactType) semanticObject); 
				return; 
			case QueryDslPackage.BOOL_CONSTANT:
				sequence_Expression(context, (BoolConstant) semanticObject); 
				return; 
			case QueryDslPackage.COMPARISON:
				sequence_Comparison(context, (Comparison) semanticObject); 
				return; 
			case QueryDslPackage.DSL:
				sequence_Dsl(context, (Dsl) semanticObject); 
				return; 
			case QueryDslPackage.DSL_FIELD:
				sequence_DslField(context, (DslField) semanticObject); 
				return; 
			case QueryDslPackage.DSL_VAR:
				sequence_DslVar(context, (DslVar) semanticObject); 
				return; 
			case QueryDslPackage.FILTER:
				sequence_Filter(context, (Filter) semanticObject); 
				return; 
			case QueryDslPackage.FILTER_EXP:
				sequence_FilterExp(context, (FilterExp) semanticObject); 
				return; 
			case QueryDslPackage.FILTER_KEYWORD:
				sequence_FilterKeyword(context, (FilterKeyword) semanticObject); 
				return; 
			case QueryDslPackage.FULL_TEXT_SEARCH:
				sequence_FullTextSearch(context, (FullTextSearch) semanticObject); 
				return; 
			case QueryDslPackage.INT_CONSTANT:
				sequence_Expression(context, (IntConstant) semanticObject); 
				return; 
			case QueryDslPackage.METAMODEL:
				sequence_Metamodel(context, (Metamodel) semanticObject); 
				return; 
			case QueryDslPackage.METAMODEL_FIELD:
				sequence_MetamodelField(context, (MetamodelField) semanticObject); 
				return; 
			case QueryDslPackage.METAMODEL_VAR:
				sequence_MetamodelVar(context, (MetamodelVar) semanticObject); 
				return; 
			case QueryDslPackage.MICRO_SYNTAX:
				sequence_MicroSyntax(context, (MicroSyntax) semanticObject); 
				return; 
			case QueryDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case QueryDslPackage.MODEL_FIELD:
				sequence_ModelField(context, (ModelField) semanticObject); 
				return; 
			case QueryDslPackage.MODEL_QUERY:
				sequence_ModelQuery(context, (ModelQuery) semanticObject); 
				return; 
			case QueryDslPackage.MODEL_VAR:
				sequence_ModelVar(context, (ModelVar) semanticObject); 
				return; 
			case QueryDslPackage.OPERATOR:
				sequence_Operator(context, (Operator) semanticObject); 
				return; 
			case QueryDslPackage.PROJECT:
				sequence_Project(context, (Project) semanticObject); 
				return; 
			case QueryDslPackage.PROJECT_FIELD:
				sequence_ProjectField(context, (ProjectField) semanticObject); 
				return; 
			case QueryDslPackage.PROJECT_PARAM:
				if (rule == grammarAccess.getProjectParamRule()) {
					sequence_ProjectParam(context, (ProjectParam) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getProjectVarRule()) {
					sequence_ProjectParam_ProjectVar(context, (ProjectParam) semanticObject); 
					return; 
				}
				else break;
			case QueryDslPackage.QEXP:
				sequence_QExp(context, (QExp) semanticObject); 
				return; 
			case QueryDslPackage.QATTRIBUTE:
				sequence_Qattribute(context, (Qattribute) semanticObject); 
				return; 
			case QueryDslPackage.QUALITY_METRIC:
				sequence_QualityMetric(context, (QualityMetric) semanticObject); 
				return; 
			case QueryDslPackage.QUERY_MODEL:
				sequence_QueryModel(context, (QueryModel) semanticObject); 
				return; 
			case QueryDslPackage.STRING_CONSTANT:
				sequence_Expression(context, (StringConstant) semanticObject); 
				return; 
			case QueryDslPackage.TRANS_PARAM:
				sequence_TransParam(context, (TransParam) semanticObject); 
				return; 
			case QueryDslPackage.TRANSFORMABLE:
				sequence_Transformable(context, (Transformable) semanticObject); 
				return; 
			case QueryDslPackage.USER:
				sequence_User(context, (User) semanticObject); 
				return; 
			case QueryDslPackage.USER_FIELD:
				sequence_UserField(context, (UserField) semanticObject); 
				return; 
			case QueryDslPackage.USER_PARAM:
				if (rule == grammarAccess.getUserParamRule()) {
					sequence_UserParam(context, (UserParam) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUserVarRule()) {
					sequence_UserParam_UserVar(context, (UserParam) semanticObject); 
					return; 
				}
				else break;
			case QueryDslPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case QueryDslPackage.VARIABLE_REF:
				sequence_Expression(context, (VariableRef) semanticObject); 
				return; 
			case QueryDslPackage.WORKSPACE:
				sequence_Workspace(context, (Workspace) semanticObject); 
				return; 
			case QueryDslPackage.WORKSPACE_FIELD:
				sequence_WorkspaceField(context, (WorkspaceField) semanticObject); 
				return; 
			case QueryDslPackage.WORKSPACE_PARAM:
				if (rule == grammarAccess.getWorkspaceParamRule()) {
					sequence_WorkspaceParam(context, (WorkspaceParam) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getWorkspaceVarRule()) {
					sequence_WorkspaceParam_WorkspaceVar(context, (WorkspaceParam) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ArtifactType returns ArtifactType
	 *
	 * Constraint:
	 *     (typeName='Model' | typeName='Metamodel' | typeName='Dsl')
	 */
	protected void sequence_ArtifactType(ISerializationContext context, ArtifactType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comparison returns Comparison
	 *
	 * Constraint:
	 *     (type='==' | type='>=' | type='<=' | type='<' | type='>')
	 */
	protected void sequence_Comparison(ISerializationContext context, Comparison semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DslField returns DslField
	 *
	 * Constraint:
	 *     (
	 *         typeName='id' | 
	 *         typeName='accessControl' | 
	 *         typeName='description' | 
	 *         typeName='ext' | 
	 *         typeName='involvedOperations' | 
	 *         typeName='license' | 
	 *         typeName='name' | 
	 *         typeName='project' | 
	 *         typeName='size' | 
	 *         typeName='storageUrl' | 
	 *         typeName='type' | 
	 *         typeName='unique_name' | 
	 *         typeName='createdAt' | 
	 *         typeName='updatedAt'
	 *     )
	 */
	protected void sequence_DslField(ISerializationContext context, DslField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DslVar returns DslVar
	 *
	 * Constraint:
	 *     exp=Expression
	 */
	protected void sequence_DslVar(ISerializationContext context, DslVar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.DSL_VAR__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.DSL_VAR__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDslVarAccess().getExpExpressionParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Dsl
	 *     Dsl returns Dsl
	 *
	 * Constraint:
	 *     (dslVar=DslVar dslVars+=DslVar* (syntax=MicroSyntax | textSearch=FullTextSearch | filter=Filter)* field=DslField fields+=DslField*)
	 */
	protected void sequence_Dsl(ISerializationContext context, Dsl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns BoolConstant
	 *
	 * Constraint:
	 *     (value='true' | value='false')
	 */
	protected void sequence_Expression(ISerializationContext context, BoolConstant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns IntConstant
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Expression(ISerializationContext context, IntConstant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INT_CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INT_CONSTANT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getValueINTTerminalRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns StringConstant
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_Expression(ISerializationContext context, StringConstant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.STRING_CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.STRING_CONSTANT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getValueSTRINGTerminalRuleCall_1_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns VariableRef
	 *
	 * Constraint:
	 *     variable=[Variable|ID]
	 */
	protected void sequence_Expression(ISerializationContext context, VariableRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.VARIABLE_REF__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.VARIABLE_REF__VARIABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getVariableVariableIDTerminalRuleCall_3_1_0_1(), semanticObject.eGet(QueryDslPackage.Literals.VARIABLE_REF__VARIABLE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FilterExp returns FilterExp
	 *
	 * Constraint:
	 *     (filterkey=FilterKeyword exp=Expression)
	 */
	protected void sequence_FilterExp(ISerializationContext context, FilterExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.FILTER_EXP__FILTERKEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.FILTER_EXP__FILTERKEY));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.FILTER_EXP__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.FILTER_EXP__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFilterExpAccess().getFilterkeyFilterKeywordParserRuleCall_0_0(), semanticObject.getFilterkey());
		feeder.accept(grammarAccess.getFilterExpAccess().getExpExpressionParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FilterKeyword returns FilterKeyword
	 *
	 * Constraint:
	 *     (type='gte' | type='lte' | type='lt' | type='gt')
	 */
	protected void sequence_FilterKeyword(ISerializationContext context, FilterKeyword semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Filter returns Filter
	 *
	 * Constraint:
	 *     (filterExp=FilterExp? filterExps=FilterExp? comp=Comparison exp=Expression)
	 */
	protected void sequence_Filter(ISerializationContext context, Filter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FullTextSearch returns FullTextSearch
	 *
	 * Constraint:
	 *     (exp=Expression exps+=Expression* op=Operator?)
	 */
	protected void sequence_FullTextSearch(ISerializationContext context, FullTextSearch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MetamodelField returns MetamodelField
	 *
	 * Constraint:
	 *     (
	 *         typeName='id' | 
	 *         typeName='accessControl' | 
	 *         typeName='description' | 
	 *         typeName='ePackage' | 
	 *         typeName='ext' | 
	 *         typeName='involvedOperations' | 
	 *         typeName='metrics' | 
	 *         typeName='models' | 
	 *         typeName='license' | 
	 *         typeName='metamodel' | 
	 *         typeName='name' | 
	 *         typeName='project' | 
	 *         typeName='size' | 
	 *         typeName='storageUrl' | 
	 *         typeName='type' | 
	 *         typeName='unique_name' | 
	 *         typeName='createdAt' | 
	 *         typeName='updatedAt'
	 *     )
	 */
	protected void sequence_MetamodelField(ISerializationContext context, MetamodelField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MetamodelVar returns MetamodelVar
	 *
	 * Constraint:
	 *     exp=Expression
	 */
	protected void sequence_MetamodelVar(ISerializationContext context, MetamodelVar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.METAMODEL_VAR__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.METAMODEL_VAR__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMetamodelVarAccess().getExpExpressionParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Metamodel
	 *     Metamodel returns Metamodel
	 *
	 * Constraint:
	 *     (
	 *         metamodelVar=MetamodelVar 
	 *         metamodelVars+=MetamodelVar* 
	 *         (syntax=MicroSyntax | textSearch=FullTextSearch | filter=Filter | qm=QualityMetric | transfo=Transformable)* 
	 *         field=MetamodelField 
	 *         fields+=MetamodelField*
	 *     )
	 */
	protected void sequence_Metamodel(ISerializationContext context, Metamodel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MicroSyntax returns MicroSyntax
	 *
	 * Constraint:
	 *     exp=Expression
	 */
	protected void sequence_MicroSyntax(ISerializationContext context, MicroSyntax semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.MICRO_SYNTAX__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.MICRO_SYNTAX__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMicroSyntaxAccess().getExpExpressionParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ModelField returns ModelField
	 *
	 * Constraint:
	 *     (
	 *         typeName='id' | 
	 *         typeName='accessControl' | 
	 *         typeName='description' | 
	 *         typeName='ext' | 
	 *         typeName='involvedOperations' | 
	 *         typeName='license' | 
	 *         typeName='metamodel' | 
	 *         typeName='name' | 
	 *         typeName='project' | 
	 *         typeName='size' | 
	 *         typeName='storageUrl' | 
	 *         typeName='type' | 
	 *         typeName='unique_name' | 
	 *         typeName='createdAt' | 
	 *         typeName='updatedAt'
	 *     )
	 */
	protected void sequence_ModelField(ISerializationContext context, ModelField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelQuery returns ModelQuery
	 *
	 * Constraint:
	 *     expr=Expression
	 */
	protected void sequence_ModelQuery(ISerializationContext context, ModelQuery semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.MODEL_QUERY__EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.MODEL_QUERY__EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelQueryAccess().getExprExpressionParserRuleCall_6_0(), semanticObject.getExpr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ModelVar returns ModelVar
	 *
	 * Constraint:
	 *     exp=Expression
	 */
	protected void sequence_ModelVar(ISerializationContext context, ModelVar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.MODEL_VAR__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.MODEL_VAR__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelVarAccess().getExpExpressionParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Model
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (
	 *         modelVar=ModelVar 
	 *         modelVars+=ModelVar* 
	 *         (syntax=MicroSyntax | textSearch=FullTextSearch | filter=Filter | q=ModelQuery)* 
	 *         field=ModelField 
	 *         fields+=ModelField*
	 *     )
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operator returns Operator
	 *
	 * Constraint:
	 *     (op='AND' | op='OR' | op='EXACT')
	 */
	protected void sequence_Operator(ISerializationContext context, Operator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProjectField returns ProjectField
	 *
	 * Constraint:
	 *     (
	 *         typeName='id' | 
	 *         typeName='name' | 
	 *         typeName='description' | 
	 *         typeName='user' | 
	 *         typeName='workspace' | 
	 *         typeName='sharedUser' | 
	 *         typeName='comments' | 
	 *         typeName='createdAt' | 
	 *         typeName='updatedAt'
	 *     )
	 */
	protected void sequence_ProjectField(ISerializationContext context, ProjectField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProjectParam returns ProjectParam
	 *
	 * Constraint:
	 *     (typeName='username' | typeName='userId' | typeName='workspaceId' | typeName='projectId')
	 */
	protected void sequence_ProjectParam(ISerializationContext context, ProjectParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProjectVar returns ProjectParam
	 *
	 * Constraint:
	 *     ((typeName='username' | typeName='userId' | typeName='workspaceId' | typeName='projectId') exp=Expression)
	 */
	protected void sequence_ProjectParam_ProjectVar(ISerializationContext context, ProjectParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Project
	 *     Project returns Project
	 *
	 * Constraint:
	 *     (projectvar=ProjectVar projectvars+=ProjectVar* field=ProjectField fields+=ProjectField*)
	 */
	protected void sequence_Project(ISerializationContext context, Project semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QExp returns QExp
	 *
	 * Constraint:
	 *     (qAttr=Qattribute comp=Comparison n=INT)
	 */
	protected void sequence_QExp(ISerializationContext context, QExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.QEXP__QATTR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.QEXP__QATTR));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.QEXP__COMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.QEXP__COMP));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.QEXP__N) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.QEXP__N));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQExpAccess().getQAttrQattributeParserRuleCall_0_0(), semanticObject.getQAttr());
		feeder.accept(grammarAccess.getQExpAccess().getCompComparisonParserRuleCall_1_0(), semanticObject.getComp());
		feeder.accept(grammarAccess.getQExpAccess().getNINTTerminalRuleCall_2_0(), semanticObject.getN());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Qattribute returns Qattribute
	 *
	 * Constraint:
	 *     (
	 *         type='qa' | 
	 *         type='qb' | 
	 *         type='qc' | 
	 *         type='qd' | 
	 *         type='qe' | 
	 *         type='qf' | 
	 *         type='qg' | 
	 *         type='qh' | 
	 *         type='qi' | 
	 *         type='qj' | 
	 *         type='qk' | 
	 *         type='ql' | 
	 *         type='qm' | 
	 *         type='qn' | 
	 *         type='qo' | 
	 *         type='qp' | 
	 *         type='qq' | 
	 *         type='qr' | 
	 *         type='qs' | 
	 *         type='qt' | 
	 *         type='qu' | 
	 *         type='qv'
	 *     )
	 */
	protected void sequence_Qattribute(ISerializationContext context, Qattribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QualityMetric returns QualityMetric
	 *
	 * Constraint:
	 *     (qExp=QExp (operator=Operator qExps=QExp)*)
	 */
	protected void sequence_QualityMetric(ISerializationContext context, QualityMetric semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QueryModel returns QueryModel
	 *
	 * Constraint:
	 *     elements+=AbstractElement+
	 */
	protected void sequence_QueryModel(ISerializationContext context, QueryModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TransParam returns TransParam
	 *
	 * Constraint:
	 *     (type='id' | type='name')
	 */
	protected void sequence_TransParam(ISerializationContext context, TransParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transformable returns Transformable
	 *
	 * Constraint:
	 *     (param=TransParam exp=Expression (param=TransParam exp=Expression)?)
	 */
	protected void sequence_Transformable(ISerializationContext context, Transformable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UserField returns UserField
	 *
	 * Constraint:
	 *     (typeName='id' | typeName='username' | typeName='email' | typeName='createdAt' | typeName='updatedAt')
	 */
	protected void sequence_UserField(ISerializationContext context, UserField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UserParam returns UserParam
	 *
	 * Constraint:
	 *     (typeName='username' | typeName='userId' | typeName='email')
	 */
	protected void sequence_UserParam(ISerializationContext context, UserParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UserVar returns UserParam
	 *
	 * Constraint:
	 *     ((typeName='username' | typeName='userId' | typeName='email') exp=Expression)
	 */
	protected void sequence_UserParam_UserVar(ISerializationContext context, UserParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns User
	 *     User returns User
	 *
	 * Constraint:
	 *     (uservar=UserVar uservars+=UserVar* field=UserField fields+=UserField*)
	 */
	protected void sequence_User(ISerializationContext context, User semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Variable
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     (name=ID expression=Expression)
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.VARIABLE__NAME));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.VARIABLE__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.VARIABLE__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVariableAccess().getExpressionExpressionParserRuleCall_3_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     WorkspaceField returns WorkspaceField
	 *
	 * Constraint:
	 *     (
	 *         typeName='id' | 
	 *         typeName='name' | 
	 *         typeName='description' | 
	 *         typeName='owner' | 
	 *         typeName='projects' | 
	 *         typeName='createdAt' | 
	 *         typeName='updatedAt'
	 *     )
	 */
	protected void sequence_WorkspaceField(ISerializationContext context, WorkspaceField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WorkspaceParam returns WorkspaceParam
	 *
	 * Constraint:
	 *     (typeName='owner' | typeName='workspaceId')
	 */
	protected void sequence_WorkspaceParam(ISerializationContext context, WorkspaceParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WorkspaceVar returns WorkspaceParam
	 *
	 * Constraint:
	 *     ((typeName='owner' | typeName='workspaceId') exp=Expression)
	 */
	protected void sequence_WorkspaceParam_WorkspaceVar(ISerializationContext context, WorkspaceParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractElement returns Workspace
	 *     Workspace returns Workspace
	 *
	 * Constraint:
	 *     (spacevar=WorkspaceVar spacevars+=WorkspaceVar* field=WorkspaceField fields+=WorkspaceField*)
	 */
	protected void sequence_Workspace(ISerializationContext context, Workspace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
