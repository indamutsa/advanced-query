/*
 * generated by Xtext 2.25.0
 */
package com.arsene.query.serializer;

import com.arsene.query.services.QueryDslGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class QueryDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected QueryDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_FullTextSearch___CommaKeyword_4_0_0_Min_matchKeyword_4_0_1_ColonKeyword_4_0_2_INTTerminalRuleCall_4_0_3__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (QueryDslGrammarAccess) access;
		match_FullTextSearch___CommaKeyword_4_0_0_Min_matchKeyword_4_0_1_ColonKeyword_4_0_2_INTTerminalRuleCall_4_0_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getFullTextSearchAccess().getCommaKeyword_4_0_0()), new TokenAlias(false, false, grammarAccess.getFullTextSearchAccess().getMin_matchKeyword_4_0_1()), new TokenAlias(false, false, grammarAccess.getFullTextSearchAccess().getColonKeyword_4_0_2()), new TokenAlias(false, false, grammarAccess.getFullTextSearchAccess().getINTTerminalRuleCall_4_0_3()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMetamodelParamRule())
			return getMetamodelParamToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getParamRule())
			return getParamToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getQueryLangRule())
			return getQueryLangToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * MetamodelParam:
	 * 	MetaParam | Param;
	 */
	protected String getMetamodelParamToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "eClassifier";
	}
	
	/**
	 * Param:
	 * 	'id' | 'accessControl' | 'description' | 'extension' | 'operation' | 'name' | 'unique-name' | 'project' | 'size';
	 */
	protected String getParamToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "id";
	}
	
	/**
	 * QueryLang:
	 * 	'EOL' | 'OCL';
	 */
	protected String getQueryLangToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "EOL";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_FullTextSearch___CommaKeyword_4_0_0_Min_matchKeyword_4_0_1_ColonKeyword_4_0_2_INTTerminalRuleCall_4_0_3__q.equals(syntax))
				emit_FullTextSearch___CommaKeyword_4_0_0_Min_matchKeyword_4_0_1_ColonKeyword_4_0_2_INTTerminalRuleCall_4_0_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (',' 'min_match' ':' INT)?
	 *
	 * This ambiguous syntax occurs at:
	 *     exp=Expression (ambiguity) ')' (rule end)
	 *     exps+=Expression (ambiguity) ')' (rule end)
	 */
	protected void emit_FullTextSearch___CommaKeyword_4_0_0_Min_matchKeyword_4_0_1_ColonKeyword_4_0_2_INTTerminalRuleCall_4_0_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
