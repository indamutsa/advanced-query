/**
 * generated by Xtext 2.25.0
 */
package com.arsene.query.queryDsl.util;

import com.arsene.query.queryDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.arsene.query.queryDsl.QueryDslPackage
 * @generated
 */
public class QueryDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static QueryDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QueryDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = QueryDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QueryDslSwitch<Adapter> modelSwitch =
    new QueryDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseQueryModel(QueryModel object)
      {
        return createQueryModelAdapter();
      }
      @Override
      public Adapter caseAbstractElement(AbstractElement object)
      {
        return createAbstractElementAdapter();
      }
      @Override
      public Adapter caseUser(User object)
      {
        return createUserAdapter();
      }
      @Override
      public Adapter caseWorkspace(Workspace object)
      {
        return createWorkspaceAdapter();
      }
      @Override
      public Adapter caseProject(Project object)
      {
        return createProjectAdapter();
      }
      @Override
      public Adapter caseMetamodel(Metamodel object)
      {
        return createMetamodelAdapter();
      }
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseDsl(Dsl object)
      {
        return createDslAdapter();
      }
      @Override
      public Adapter caseMicroSyntax(MicroSyntax object)
      {
        return createMicroSyntaxAdapter();
      }
      @Override
      public Adapter caseModelQuery(ModelQuery object)
      {
        return createModelQueryAdapter();
      }
      @Override
      public Adapter caseFullTextSearch(FullTextSearch object)
      {
        return createFullTextSearchAdapter();
      }
      @Override
      public Adapter caseQualityMetric(QualityMetric object)
      {
        return createQualityMetricAdapter();
      }
      @Override
      public Adapter caseTransformable(Transformable object)
      {
        return createTransformableAdapter();
      }
      @Override
      public Adapter caseTransParam(TransParam object)
      {
        return createTransParamAdapter();
      }
      @Override
      public Adapter caseQExp(QExp object)
      {
        return createQExpAdapter();
      }
      @Override
      public Adapter caseQattribute(Qattribute object)
      {
        return createQattributeAdapter();
      }
      @Override
      public Adapter caseOperator(Operator object)
      {
        return createOperatorAdapter();
      }
      @Override
      public Adapter caseFilter(Filter object)
      {
        return createFilterAdapter();
      }
      @Override
      public Adapter caseFilterExp(FilterExp object)
      {
        return createFilterExpAdapter();
      }
      @Override
      public Adapter caseComparison(Comparison object)
      {
        return createComparisonAdapter();
      }
      @Override
      public Adapter caseFilterKeyword(FilterKeyword object)
      {
        return createFilterKeywordAdapter();
      }
      @Override
      public Adapter caseArtifactType(ArtifactType object)
      {
        return createArtifactTypeAdapter();
      }
      @Override
      public Adapter caseUserVar(UserVar object)
      {
        return createUserVarAdapter();
      }
      @Override
      public Adapter caseWorkspaceVar(WorkspaceVar object)
      {
        return createWorkspaceVarAdapter();
      }
      @Override
      public Adapter caseProjectVar(ProjectVar object)
      {
        return createProjectVarAdapter();
      }
      @Override
      public Adapter caseMetamodelVar(MetamodelVar object)
      {
        return createMetamodelVarAdapter();
      }
      @Override
      public Adapter caseModelVar(ModelVar object)
      {
        return createModelVarAdapter();
      }
      @Override
      public Adapter caseDslVar(DslVar object)
      {
        return createDslVarAdapter();
      }
      @Override
      public Adapter caseUserField(UserField object)
      {
        return createUserFieldAdapter();
      }
      @Override
      public Adapter caseWorkspaceField(WorkspaceField object)
      {
        return createWorkspaceFieldAdapter();
      }
      @Override
      public Adapter caseProjectField(ProjectField object)
      {
        return createProjectFieldAdapter();
      }
      @Override
      public Adapter caseMetamodelField(MetamodelField object)
      {
        return createMetamodelFieldAdapter();
      }
      @Override
      public Adapter caseModelField(ModelField object)
      {
        return createModelFieldAdapter();
      }
      @Override
      public Adapter caseDslField(DslField object)
      {
        return createDslFieldAdapter();
      }
      @Override
      public Adapter caseUserParam(UserParam object)
      {
        return createUserParamAdapter();
      }
      @Override
      public Adapter caseWorkspaceParam(WorkspaceParam object)
      {
        return createWorkspaceParamAdapter();
      }
      @Override
      public Adapter caseProjectParam(ProjectParam object)
      {
        return createProjectParamAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseIntConstant(IntConstant object)
      {
        return createIntConstantAdapter();
      }
      @Override
      public Adapter caseStringConstant(StringConstant object)
      {
        return createStringConstantAdapter();
      }
      @Override
      public Adapter caseBoolConstant(BoolConstant object)
      {
        return createBoolConstantAdapter();
      }
      @Override
      public Adapter caseVariableRef(VariableRef object)
      {
        return createVariableRefAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.QueryModel <em>Query Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.QueryModel
   * @generated
   */
  public Adapter createQueryModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.AbstractElement <em>Abstract Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.AbstractElement
   * @generated
   */
  public Adapter createAbstractElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.User <em>User</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.User
   * @generated
   */
  public Adapter createUserAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.Workspace <em>Workspace</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.Workspace
   * @generated
   */
  public Adapter createWorkspaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.Project <em>Project</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.Project
   * @generated
   */
  public Adapter createProjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.Metamodel <em>Metamodel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.Metamodel
   * @generated
   */
  public Adapter createMetamodelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.Dsl <em>Dsl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.Dsl
   * @generated
   */
  public Adapter createDslAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.MicroSyntax <em>Micro Syntax</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.MicroSyntax
   * @generated
   */
  public Adapter createMicroSyntaxAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.ModelQuery <em>Model Query</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.ModelQuery
   * @generated
   */
  public Adapter createModelQueryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.FullTextSearch <em>Full Text Search</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.FullTextSearch
   * @generated
   */
  public Adapter createFullTextSearchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.QualityMetric <em>Quality Metric</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.QualityMetric
   * @generated
   */
  public Adapter createQualityMetricAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.Transformable <em>Transformable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.Transformable
   * @generated
   */
  public Adapter createTransformableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.TransParam <em>Trans Param</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.TransParam
   * @generated
   */
  public Adapter createTransParamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.QExp <em>QExp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.QExp
   * @generated
   */
  public Adapter createQExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.Qattribute <em>Qattribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.Qattribute
   * @generated
   */
  public Adapter createQattributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.Operator <em>Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.Operator
   * @generated
   */
  public Adapter createOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.Filter <em>Filter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.Filter
   * @generated
   */
  public Adapter createFilterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.FilterExp <em>Filter Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.FilterExp
   * @generated
   */
  public Adapter createFilterExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.Comparison <em>Comparison</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.Comparison
   * @generated
   */
  public Adapter createComparisonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.FilterKeyword <em>Filter Keyword</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.FilterKeyword
   * @generated
   */
  public Adapter createFilterKeywordAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.ArtifactType <em>Artifact Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.ArtifactType
   * @generated
   */
  public Adapter createArtifactTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.UserVar <em>User Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.UserVar
   * @generated
   */
  public Adapter createUserVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.WorkspaceVar <em>Workspace Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.WorkspaceVar
   * @generated
   */
  public Adapter createWorkspaceVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.ProjectVar <em>Project Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.ProjectVar
   * @generated
   */
  public Adapter createProjectVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.MetamodelVar <em>Metamodel Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.MetamodelVar
   * @generated
   */
  public Adapter createMetamodelVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.ModelVar <em>Model Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.ModelVar
   * @generated
   */
  public Adapter createModelVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.DslVar <em>Dsl Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.DslVar
   * @generated
   */
  public Adapter createDslVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.UserField <em>User Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.UserField
   * @generated
   */
  public Adapter createUserFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.WorkspaceField <em>Workspace Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.WorkspaceField
   * @generated
   */
  public Adapter createWorkspaceFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.ProjectField <em>Project Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.ProjectField
   * @generated
   */
  public Adapter createProjectFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.MetamodelField <em>Metamodel Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.MetamodelField
   * @generated
   */
  public Adapter createMetamodelFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.ModelField <em>Model Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.ModelField
   * @generated
   */
  public Adapter createModelFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.DslField <em>Dsl Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.DslField
   * @generated
   */
  public Adapter createDslFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.UserParam <em>User Param</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.UserParam
   * @generated
   */
  public Adapter createUserParamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.WorkspaceParam <em>Workspace Param</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.WorkspaceParam
   * @generated
   */
  public Adapter createWorkspaceParamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.ProjectParam <em>Project Param</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.ProjectParam
   * @generated
   */
  public Adapter createProjectParamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.IntConstant <em>Int Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.IntConstant
   * @generated
   */
  public Adapter createIntConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.StringConstant <em>String Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.StringConstant
   * @generated
   */
  public Adapter createStringConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.BoolConstant <em>Bool Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.BoolConstant
   * @generated
   */
  public Adapter createBoolConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.arsene.query.queryDsl.VariableRef <em>Variable Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.arsene.query.queryDsl.VariableRef
   * @generated
   */
  public Adapter createVariableRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //QueryDslAdapterFactory
