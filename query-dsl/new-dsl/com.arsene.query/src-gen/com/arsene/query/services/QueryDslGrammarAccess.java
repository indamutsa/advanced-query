/*
 * generated by Xtext 2.25.0
 */
package com.arsene.query.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class QueryDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class QueryModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.QueryModel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//QueryModel:
		//    elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUserParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWorkspaceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cProjectParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMetamodelParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cModelParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDslParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//AbstractElement:
		//    Variable | User | Workspace | Project | Metamodel | Model | Dsl;
		@Override public ParserRule getRule() { return rule; }
		
		//Variable | User | Workspace | Project | Metamodel | Model | Dsl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }
		
		//User
		public RuleCall getUserParserRuleCall_1() { return cUserParserRuleCall_1; }
		
		//Workspace
		public RuleCall getWorkspaceParserRuleCall_2() { return cWorkspaceParserRuleCall_2; }
		
		//Project
		public RuleCall getProjectParserRuleCall_3() { return cProjectParserRuleCall_3; }
		
		//Metamodel
		public RuleCall getMetamodelParserRuleCall_4() { return cMetamodelParserRuleCall_4; }
		
		//Model
		public RuleCall getModelParserRuleCall_5() { return cModelParserRuleCall_5; }
		
		//Dsl
		public RuleCall getDslParserRuleCall_6() { return cDslParserRuleCall_6; }
	}
	public class UserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.User");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cUserKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUservarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUservarUserVarParserRuleCall_3_0 = (RuleCall)cUservarAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUservarsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUservarsUserVarParserRuleCall_4_1_0 = (RuleCall)cUservarsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cReturnKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cFieldAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cFieldUserFieldParserRuleCall_8_0 = (RuleCall)cFieldAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cFieldsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cFieldsUserFieldParserRuleCall_9_1_0 = (RuleCall)cFieldsAssignment_9_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//User:
		//    'Query' 'User' '(' uservar=UserVar (',' uservars+=UserVar)* ')'
		//    'return' '[' field=UserField (',' fields+=UserField)*']';
		@Override public ParserRule getRule() { return rule; }
		
		//'Query' 'User' '(' uservar=UserVar (',' uservars+=UserVar)* ')'
		//'return' '[' field=UserField (',' fields+=UserField)*']'
		public Group getGroup() { return cGroup; }
		
		//'Query'
		public Keyword getQueryKeyword_0() { return cQueryKeyword_0; }
		
		//'User'
		public Keyword getUserKeyword_1() { return cUserKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//uservar=UserVar
		public Assignment getUservarAssignment_3() { return cUservarAssignment_3; }
		
		//UserVar
		public RuleCall getUservarUserVarParserRuleCall_3_0() { return cUservarUserVarParserRuleCall_3_0; }
		
		//(',' uservars+=UserVar)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//uservars+=UserVar
		public Assignment getUservarsAssignment_4_1() { return cUservarsAssignment_4_1; }
		
		//UserVar
		public RuleCall getUservarsUserVarParserRuleCall_4_1_0() { return cUservarsUserVarParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'return'
		public Keyword getReturnKeyword_6() { return cReturnKeyword_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7() { return cLeftSquareBracketKeyword_7; }
		
		//field=UserField
		public Assignment getFieldAssignment_8() { return cFieldAssignment_8; }
		
		//UserField
		public RuleCall getFieldUserFieldParserRuleCall_8_0() { return cFieldUserFieldParserRuleCall_8_0; }
		
		//(',' fields+=UserField)*
		public Group getGroup_9() { return cGroup_9; }
		
		//','
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }
		
		//fields+=UserField
		public Assignment getFieldsAssignment_9_1() { return cFieldsAssignment_9_1; }
		
		//UserField
		public RuleCall getFieldsUserFieldParserRuleCall_9_1_0() { return cFieldsUserFieldParserRuleCall_9_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10() { return cRightSquareBracketKeyword_10; }
	}
	public class WorkspaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.Workspace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWorkspaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpacevarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpacevarWorkspaceVarParserRuleCall_3_0 = (RuleCall)cSpacevarAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSpacevarsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSpacevarsWorkspaceVarParserRuleCall_4_1_0 = (RuleCall)cSpacevarsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cReturnKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cFieldAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cFieldWorkspaceFieldParserRuleCall_8_0 = (RuleCall)cFieldAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cFieldsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cFieldsWorkspaceFieldParserRuleCall_9_1_0 = (RuleCall)cFieldsAssignment_9_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Workspace:
		//    'Query' 'Workspace' '(' spacevar=WorkspaceVar (',' spacevars+=WorkspaceVar)* ')'
		//    'return' '[' field=WorkspaceField (',' fields+=WorkspaceField)*']';
		@Override public ParserRule getRule() { return rule; }
		
		//'Query' 'Workspace' '(' spacevar=WorkspaceVar (',' spacevars+=WorkspaceVar)* ')'
		//'return' '[' field=WorkspaceField (',' fields+=WorkspaceField)*']'
		public Group getGroup() { return cGroup; }
		
		//'Query'
		public Keyword getQueryKeyword_0() { return cQueryKeyword_0; }
		
		//'Workspace'
		public Keyword getWorkspaceKeyword_1() { return cWorkspaceKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//spacevar=WorkspaceVar
		public Assignment getSpacevarAssignment_3() { return cSpacevarAssignment_3; }
		
		//WorkspaceVar
		public RuleCall getSpacevarWorkspaceVarParserRuleCall_3_0() { return cSpacevarWorkspaceVarParserRuleCall_3_0; }
		
		//(',' spacevars+=WorkspaceVar)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//spacevars+=WorkspaceVar
		public Assignment getSpacevarsAssignment_4_1() { return cSpacevarsAssignment_4_1; }
		
		//WorkspaceVar
		public RuleCall getSpacevarsWorkspaceVarParserRuleCall_4_1_0() { return cSpacevarsWorkspaceVarParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'return'
		public Keyword getReturnKeyword_6() { return cReturnKeyword_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7() { return cLeftSquareBracketKeyword_7; }
		
		//field=WorkspaceField
		public Assignment getFieldAssignment_8() { return cFieldAssignment_8; }
		
		//WorkspaceField
		public RuleCall getFieldWorkspaceFieldParserRuleCall_8_0() { return cFieldWorkspaceFieldParserRuleCall_8_0; }
		
		//(',' fields+=WorkspaceField)*
		public Group getGroup_9() { return cGroup_9; }
		
		//','
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }
		
		//fields+=WorkspaceField
		public Assignment getFieldsAssignment_9_1() { return cFieldsAssignment_9_1; }
		
		//WorkspaceField
		public RuleCall getFieldsWorkspaceFieldParserRuleCall_9_1_0() { return cFieldsWorkspaceFieldParserRuleCall_9_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10() { return cRightSquareBracketKeyword_10; }
	}
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.Project");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProjectvarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProjectvarProjectVarParserRuleCall_3_0 = (RuleCall)cProjectvarAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cProjectvarsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cProjectvarsProjectVarParserRuleCall_4_1_0 = (RuleCall)cProjectvarsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cReturnKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cFieldAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cFieldProjectFieldParserRuleCall_8_0 = (RuleCall)cFieldAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cFieldsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cFieldsProjectFieldParserRuleCall_9_1_0 = (RuleCall)cFieldsAssignment_9_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Project:
		//    'Query' 'Project' '(' projectvar=ProjectVar (',' projectvars+=ProjectVar)* ')'
		//    'return' '[' field=ProjectField (',' fields+=ProjectField)*']';
		@Override public ParserRule getRule() { return rule; }
		
		//'Query' 'Project' '(' projectvar=ProjectVar (',' projectvars+=ProjectVar)* ')'
		//'return' '[' field=ProjectField (',' fields+=ProjectField)*']'
		public Group getGroup() { return cGroup; }
		
		//'Query'
		public Keyword getQueryKeyword_0() { return cQueryKeyword_0; }
		
		//'Project'
		public Keyword getProjectKeyword_1() { return cProjectKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//projectvar=ProjectVar
		public Assignment getProjectvarAssignment_3() { return cProjectvarAssignment_3; }
		
		//ProjectVar
		public RuleCall getProjectvarProjectVarParserRuleCall_3_0() { return cProjectvarProjectVarParserRuleCall_3_0; }
		
		//(',' projectvars+=ProjectVar)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//projectvars+=ProjectVar
		public Assignment getProjectvarsAssignment_4_1() { return cProjectvarsAssignment_4_1; }
		
		//ProjectVar
		public RuleCall getProjectvarsProjectVarParserRuleCall_4_1_0() { return cProjectvarsProjectVarParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'return'
		public Keyword getReturnKeyword_6() { return cReturnKeyword_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7() { return cLeftSquareBracketKeyword_7; }
		
		//field=ProjectField
		public Assignment getFieldAssignment_8() { return cFieldAssignment_8; }
		
		//ProjectField
		public RuleCall getFieldProjectFieldParserRuleCall_8_0() { return cFieldProjectFieldParserRuleCall_8_0; }
		
		//(',' fields+=ProjectField)*
		public Group getGroup_9() { return cGroup_9; }
		
		//','
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }
		
		//fields+=ProjectField
		public Assignment getFieldsAssignment_9_1() { return cFieldsAssignment_9_1; }
		
		//ProjectField
		public RuleCall getFieldsProjectFieldParserRuleCall_9_1_0() { return cFieldsProjectFieldParserRuleCall_9_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10() { return cRightSquareBracketKeyword_10; }
	}
	public class MetamodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.Metamodel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMetamodelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMetamodelVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMetamodelVarMetamodelVarParserRuleCall_3_0 = (RuleCall)cMetamodelVarAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMetamodelVarsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMetamodelVarsMetamodelVarParserRuleCall_4_1_0 = (RuleCall)cMetamodelVarsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignGreaterThanSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Assignment cSyntaxAssignment_6_1_0 = (Assignment)cAlternatives_6_1.eContents().get(0);
		private final RuleCall cSyntaxMicroSyntaxParserRuleCall_6_1_0_0 = (RuleCall)cSyntaxAssignment_6_1_0.eContents().get(0);
		private final Assignment cTextSearchAssignment_6_1_1 = (Assignment)cAlternatives_6_1.eContents().get(1);
		private final RuleCall cTextSearchFullTextSearchParserRuleCall_6_1_1_0 = (RuleCall)cTextSearchAssignment_6_1_1.eContents().get(0);
		private final Assignment cFilterAssignment_6_1_2 = (Assignment)cAlternatives_6_1.eContents().get(2);
		private final RuleCall cFilterFilterParserRuleCall_6_1_2_0 = (RuleCall)cFilterAssignment_6_1_2.eContents().get(0);
		private final Assignment cQmAssignment_6_1_3 = (Assignment)cAlternatives_6_1.eContents().get(3);
		private final RuleCall cQmQualityMetricParserRuleCall_6_1_3_0 = (RuleCall)cQmAssignment_6_1_3.eContents().get(0);
		private final Assignment cTransfoAssignment_6_1_4 = (Assignment)cAlternatives_6_1.eContents().get(4);
		private final RuleCall cTransfoTransformableParserRuleCall_6_1_4_0 = (RuleCall)cTransfoAssignment_6_1_4.eContents().get(0);
		private final Keyword cReturnKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cFieldAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cFieldMetamodelFieldParserRuleCall_9_0 = (RuleCall)cFieldAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cFieldsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cFieldsMetamodelFieldParserRuleCall_10_1_0 = (RuleCall)cFieldsAssignment_10_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Metamodel:
		//    'Query' 'Metamodel' '(' metamodelVar=MetamodelVar (',' metamodelVars+=MetamodelVar)* ')'
		//    ('=>' (syntax=MicroSyntax | textSearch=FullTextSearch | filter=Filter | qm=QualityMetric | transfo=Transformable))*
		//    'return' '[' field=MetamodelField (',' fields+=MetamodelField)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'Query' 'Metamodel' '(' metamodelVar=MetamodelVar (',' metamodelVars+=MetamodelVar)* ')'
		//('=>' (syntax=MicroSyntax | textSearch=FullTextSearch | filter=Filter | qm=QualityMetric | transfo=Transformable))*
		//'return' '[' field=MetamodelField (',' fields+=MetamodelField)* ']'
		public Group getGroup() { return cGroup; }
		
		//'Query'
		public Keyword getQueryKeyword_0() { return cQueryKeyword_0; }
		
		//'Metamodel'
		public Keyword getMetamodelKeyword_1() { return cMetamodelKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//metamodelVar=MetamodelVar
		public Assignment getMetamodelVarAssignment_3() { return cMetamodelVarAssignment_3; }
		
		//MetamodelVar
		public RuleCall getMetamodelVarMetamodelVarParserRuleCall_3_0() { return cMetamodelVarMetamodelVarParserRuleCall_3_0; }
		
		//(',' metamodelVars+=MetamodelVar)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//metamodelVars+=MetamodelVar
		public Assignment getMetamodelVarsAssignment_4_1() { return cMetamodelVarsAssignment_4_1; }
		
		//MetamodelVar
		public RuleCall getMetamodelVarsMetamodelVarParserRuleCall_4_1_0() { return cMetamodelVarsMetamodelVarParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//('=>' (syntax=MicroSyntax | textSearch=FullTextSearch | filter=Filter | qm=QualityMetric | transfo=Transformable))*
		public Group getGroup_6() { return cGroup_6; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_6_0() { return cEqualsSignGreaterThanSignKeyword_6_0; }
		
		//(syntax=MicroSyntax | textSearch=FullTextSearch | filter=Filter | qm=QualityMetric | transfo=Transformable)
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }
		
		//syntax=MicroSyntax
		public Assignment getSyntaxAssignment_6_1_0() { return cSyntaxAssignment_6_1_0; }
		
		//MicroSyntax
		public RuleCall getSyntaxMicroSyntaxParserRuleCall_6_1_0_0() { return cSyntaxMicroSyntaxParserRuleCall_6_1_0_0; }
		
		//textSearch=FullTextSearch
		public Assignment getTextSearchAssignment_6_1_1() { return cTextSearchAssignment_6_1_1; }
		
		//FullTextSearch
		public RuleCall getTextSearchFullTextSearchParserRuleCall_6_1_1_0() { return cTextSearchFullTextSearchParserRuleCall_6_1_1_0; }
		
		//filter=Filter
		public Assignment getFilterAssignment_6_1_2() { return cFilterAssignment_6_1_2; }
		
		//Filter
		public RuleCall getFilterFilterParserRuleCall_6_1_2_0() { return cFilterFilterParserRuleCall_6_1_2_0; }
		
		//qm=QualityMetric
		public Assignment getQmAssignment_6_1_3() { return cQmAssignment_6_1_3; }
		
		//QualityMetric
		public RuleCall getQmQualityMetricParserRuleCall_6_1_3_0() { return cQmQualityMetricParserRuleCall_6_1_3_0; }
		
		//transfo=Transformable
		public Assignment getTransfoAssignment_6_1_4() { return cTransfoAssignment_6_1_4; }
		
		//Transformable
		public RuleCall getTransfoTransformableParserRuleCall_6_1_4_0() { return cTransfoTransformableParserRuleCall_6_1_4_0; }
		
		//'return'
		public Keyword getReturnKeyword_7() { return cReturnKeyword_7; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_8() { return cLeftSquareBracketKeyword_8; }
		
		//field=MetamodelField
		public Assignment getFieldAssignment_9() { return cFieldAssignment_9; }
		
		//MetamodelField
		public RuleCall getFieldMetamodelFieldParserRuleCall_9_0() { return cFieldMetamodelFieldParserRuleCall_9_0; }
		
		//(',' fields+=MetamodelField)*
		public Group getGroup_10() { return cGroup_10; }
		
		//','
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }
		
		//fields+=MetamodelField
		public Assignment getFieldsAssignment_10_1() { return cFieldsAssignment_10_1; }
		
		//MetamodelField
		public RuleCall getFieldsMetamodelFieldParserRuleCall_10_1_0() { return cFieldsMetamodelFieldParserRuleCall_10_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_11() { return cRightSquareBracketKeyword_11; }
	}
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModelVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModelVarModelVarParserRuleCall_3_0 = (RuleCall)cModelVarAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cModelVarsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cModelVarsModelVarParserRuleCall_4_1_0 = (RuleCall)cModelVarsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignGreaterThanSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Assignment cSyntaxAssignment_6_1_0 = (Assignment)cAlternatives_6_1.eContents().get(0);
		private final RuleCall cSyntaxMicroSyntaxParserRuleCall_6_1_0_0 = (RuleCall)cSyntaxAssignment_6_1_0.eContents().get(0);
		private final Assignment cTextSearchAssignment_6_1_1 = (Assignment)cAlternatives_6_1.eContents().get(1);
		private final RuleCall cTextSearchFullTextSearchParserRuleCall_6_1_1_0 = (RuleCall)cTextSearchAssignment_6_1_1.eContents().get(0);
		private final Assignment cFilterAssignment_6_1_2 = (Assignment)cAlternatives_6_1.eContents().get(2);
		private final RuleCall cFilterFilterParserRuleCall_6_1_2_0 = (RuleCall)cFilterAssignment_6_1_2.eContents().get(0);
		private final Assignment cQAssignment_6_1_3 = (Assignment)cAlternatives_6_1.eContents().get(3);
		private final RuleCall cQModelQueryParserRuleCall_6_1_3_0 = (RuleCall)cQAssignment_6_1_3.eContents().get(0);
		private final Keyword cReturnKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cFieldAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cFieldModelFieldParserRuleCall_9_0 = (RuleCall)cFieldAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cFieldsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cFieldsModelFieldParserRuleCall_10_1_0 = (RuleCall)cFieldsAssignment_10_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Model:
		//    'Query' 'Model' '(' modelVar=ModelVar (',' modelVars+=ModelVar)* ')'
		//    ('=>' (syntax=MicroSyntax | textSearch=FullTextSearch | filter=Filter | q=ModelQuery))*
		//    'return' '[' field=ModelField (',' fields+=ModelField)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'Query' 'Model' '(' modelVar=ModelVar (',' modelVars+=ModelVar)* ')'
		//('=>' (syntax=MicroSyntax | textSearch=FullTextSearch | filter=Filter | q=ModelQuery))*
		//'return' '[' field=ModelField (',' fields+=ModelField)* ']'
		public Group getGroup() { return cGroup; }
		
		//'Query'
		public Keyword getQueryKeyword_0() { return cQueryKeyword_0; }
		
		//'Model'
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//modelVar=ModelVar
		public Assignment getModelVarAssignment_3() { return cModelVarAssignment_3; }
		
		//ModelVar
		public RuleCall getModelVarModelVarParserRuleCall_3_0() { return cModelVarModelVarParserRuleCall_3_0; }
		
		//(',' modelVars+=ModelVar)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//modelVars+=ModelVar
		public Assignment getModelVarsAssignment_4_1() { return cModelVarsAssignment_4_1; }
		
		//ModelVar
		public RuleCall getModelVarsModelVarParserRuleCall_4_1_0() { return cModelVarsModelVarParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//('=>' (syntax=MicroSyntax | textSearch=FullTextSearch | filter=Filter | q=ModelQuery))*
		public Group getGroup_6() { return cGroup_6; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_6_0() { return cEqualsSignGreaterThanSignKeyword_6_0; }
		
		//(syntax=MicroSyntax | textSearch=FullTextSearch | filter=Filter | q=ModelQuery)
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }
		
		//syntax=MicroSyntax
		public Assignment getSyntaxAssignment_6_1_0() { return cSyntaxAssignment_6_1_0; }
		
		//MicroSyntax
		public RuleCall getSyntaxMicroSyntaxParserRuleCall_6_1_0_0() { return cSyntaxMicroSyntaxParserRuleCall_6_1_0_0; }
		
		//textSearch=FullTextSearch
		public Assignment getTextSearchAssignment_6_1_1() { return cTextSearchAssignment_6_1_1; }
		
		//FullTextSearch
		public RuleCall getTextSearchFullTextSearchParserRuleCall_6_1_1_0() { return cTextSearchFullTextSearchParserRuleCall_6_1_1_0; }
		
		//filter=Filter
		public Assignment getFilterAssignment_6_1_2() { return cFilterAssignment_6_1_2; }
		
		//Filter
		public RuleCall getFilterFilterParserRuleCall_6_1_2_0() { return cFilterFilterParserRuleCall_6_1_2_0; }
		
		//q=ModelQuery
		public Assignment getQAssignment_6_1_3() { return cQAssignment_6_1_3; }
		
		//ModelQuery
		public RuleCall getQModelQueryParserRuleCall_6_1_3_0() { return cQModelQueryParserRuleCall_6_1_3_0; }
		
		//'return'
		public Keyword getReturnKeyword_7() { return cReturnKeyword_7; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_8() { return cLeftSquareBracketKeyword_8; }
		
		//field=ModelField
		public Assignment getFieldAssignment_9() { return cFieldAssignment_9; }
		
		//ModelField
		public RuleCall getFieldModelFieldParserRuleCall_9_0() { return cFieldModelFieldParserRuleCall_9_0; }
		
		//(',' fields+=ModelField)*
		public Group getGroup_10() { return cGroup_10; }
		
		//','
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }
		
		//fields+=ModelField
		public Assignment getFieldsAssignment_10_1() { return cFieldsAssignment_10_1; }
		
		//ModelField
		public RuleCall getFieldsModelFieldParserRuleCall_10_1_0() { return cFieldsModelFieldParserRuleCall_10_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_11() { return cRightSquareBracketKeyword_11; }
	}
	public class DslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.Dsl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDslKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDslVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDslVarDslVarParserRuleCall_3_0 = (RuleCall)cDslVarAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDslVarsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDslVarsDslVarParserRuleCall_4_1_0 = (RuleCall)cDslVarsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignGreaterThanSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Assignment cSyntaxAssignment_6_1_0 = (Assignment)cAlternatives_6_1.eContents().get(0);
		private final RuleCall cSyntaxMicroSyntaxParserRuleCall_6_1_0_0 = (RuleCall)cSyntaxAssignment_6_1_0.eContents().get(0);
		private final Assignment cTextSearchAssignment_6_1_1 = (Assignment)cAlternatives_6_1.eContents().get(1);
		private final RuleCall cTextSearchFullTextSearchParserRuleCall_6_1_1_0 = (RuleCall)cTextSearchAssignment_6_1_1.eContents().get(0);
		private final Assignment cFilterAssignment_6_1_2 = (Assignment)cAlternatives_6_1.eContents().get(2);
		private final RuleCall cFilterFilterParserRuleCall_6_1_2_0 = (RuleCall)cFilterAssignment_6_1_2.eContents().get(0);
		private final Keyword cReturnKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cFieldAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cFieldDslFieldParserRuleCall_9_0 = (RuleCall)cFieldAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cFieldsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cFieldsDslFieldParserRuleCall_10_1_0 = (RuleCall)cFieldsAssignment_10_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Dsl:
		//    'Query' 'Dsl' '(' dslVar=DslVar (',' dslVars+=DslVar)* ')'
		//    ('=>' (syntax=MicroSyntax | textSearch=FullTextSearch | filter=Filter))*
		//    'return' '[' field=DslField (',' fields+=DslField)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'Query' 'Dsl' '(' dslVar=DslVar (',' dslVars+=DslVar)* ')'
		//('=>' (syntax=MicroSyntax | textSearch=FullTextSearch | filter=Filter))*
		//'return' '[' field=DslField (',' fields+=DslField)* ']'
		public Group getGroup() { return cGroup; }
		
		//'Query'
		public Keyword getQueryKeyword_0() { return cQueryKeyword_0; }
		
		//'Dsl'
		public Keyword getDslKeyword_1() { return cDslKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//dslVar=DslVar
		public Assignment getDslVarAssignment_3() { return cDslVarAssignment_3; }
		
		//DslVar
		public RuleCall getDslVarDslVarParserRuleCall_3_0() { return cDslVarDslVarParserRuleCall_3_0; }
		
		//(',' dslVars+=DslVar)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//dslVars+=DslVar
		public Assignment getDslVarsAssignment_4_1() { return cDslVarsAssignment_4_1; }
		
		//DslVar
		public RuleCall getDslVarsDslVarParserRuleCall_4_1_0() { return cDslVarsDslVarParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//('=>' (syntax=MicroSyntax | textSearch=FullTextSearch | filter=Filter))*
		public Group getGroup_6() { return cGroup_6; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_6_0() { return cEqualsSignGreaterThanSignKeyword_6_0; }
		
		//(syntax=MicroSyntax | textSearch=FullTextSearch | filter=Filter)
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }
		
		//syntax=MicroSyntax
		public Assignment getSyntaxAssignment_6_1_0() { return cSyntaxAssignment_6_1_0; }
		
		//MicroSyntax
		public RuleCall getSyntaxMicroSyntaxParserRuleCall_6_1_0_0() { return cSyntaxMicroSyntaxParserRuleCall_6_1_0_0; }
		
		//textSearch=FullTextSearch
		public Assignment getTextSearchAssignment_6_1_1() { return cTextSearchAssignment_6_1_1; }
		
		//FullTextSearch
		public RuleCall getTextSearchFullTextSearchParserRuleCall_6_1_1_0() { return cTextSearchFullTextSearchParserRuleCall_6_1_1_0; }
		
		//filter=Filter
		public Assignment getFilterAssignment_6_1_2() { return cFilterAssignment_6_1_2; }
		
		//Filter
		public RuleCall getFilterFilterParserRuleCall_6_1_2_0() { return cFilterFilterParserRuleCall_6_1_2_0; }
		
		//'return'
		public Keyword getReturnKeyword_7() { return cReturnKeyword_7; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_8() { return cLeftSquareBracketKeyword_8; }
		
		//field=DslField
		public Assignment getFieldAssignment_9() { return cFieldAssignment_9; }
		
		//DslField
		public RuleCall getFieldDslFieldParserRuleCall_9_0() { return cFieldDslFieldParserRuleCall_9_0; }
		
		//(',' fields+=DslField)*
		public Group getGroup_10() { return cGroup_10; }
		
		//','
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }
		
		//fields+=DslField
		public Assignment getFieldsAssignment_10_1() { return cFieldsAssignment_10_1; }
		
		//DslField
		public RuleCall getFieldsDslFieldParserRuleCall_10_1_0() { return cFieldsDslFieldParserRuleCall_10_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_11() { return cRightSquareBracketKeyword_11; }
	}
	public class MicroSyntaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.MicroSyntax");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMicroSyntaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////    ('=>' (syntx=MicroSyntax | textSearch=FullTextSearch | filter=Filter | qm=QualityMetric | transfo=Transformable)?)*
		//MicroSyntax:
		//    'microSyntax' '(' exp=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'microSyntax' '(' exp=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'microSyntax'
		public Keyword getMicroSyntaxKeyword_0() { return cMicroSyntaxKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ModelQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.ModelQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cQueryLangParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExprAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExprExpressionParserRuleCall_6_0 = (RuleCall)cExprAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ModelQuery:
		//    'modelQuery' '(' 'type' ':' QueryLang ',' expr=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'modelQuery' '(' 'type' ':' QueryLang ',' expr=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'modelQuery'
		public Keyword getModelQueryKeyword_0() { return cModelQueryKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//QueryLang
		public RuleCall getQueryLangParserRuleCall_4() { return cQueryLangParserRuleCall_4; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//expr=Expression
		public Assignment getExprAssignment_6() { return cExprAssignment_6; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_6_0() { return cExprExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class QueryLangElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.QueryLang");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEOLKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOCLKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//QueryLang:
		//    'EOL' | 'OCL';
		@Override public ParserRule getRule() { return rule; }
		
		//'EOL' | 'OCL'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'EOL'
		public Keyword getEOLKeyword_0() { return cEOLKeyword_0; }
		
		//'OCL'
		public Keyword getOCLKeyword_1() { return cOCLKeyword_1; }
	}
	public class FullTextSearchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.FullTextSearch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullTextSearchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpsExpressionParserRuleCall_3_1_0 = (RuleCall)cExpsAssignment_3_1.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cCommaKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Keyword cMin_matchKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		private final Keyword cColonKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_4_0_3 = (RuleCall)cGroup_4_0.eContents().get(3);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Keyword cOperatorKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Keyword cColonKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		private final Assignment cOpAssignment_4_1_3 = (Assignment)cGroup_4_1.eContents().get(3);
		private final RuleCall cOpOperatorParserRuleCall_4_1_3_0 = (RuleCall)cOpAssignment_4_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FullTextSearch:
		//    'fullTextSearch' '(' exp=Expression (',' exps+=Expression)* (',' 'min_match' ':' INT | ',' 'operator' ':'
		//    op=Operator)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'fullTextSearch' '(' exp=Expression (',' exps+=Expression)* (',' 'min_match' ':' INT | ',' 'operator' ':'
		//op=Operator)? ')'
		public Group getGroup() { return cGroup; }
		
		//'fullTextSearch'
		public Keyword getFullTextSearchKeyword_0() { return cFullTextSearchKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
		
		//(',' exps+=Expression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//exps+=Expression
		public Assignment getExpsAssignment_3_1() { return cExpsAssignment_3_1; }
		
		//Expression
		public RuleCall getExpsExpressionParserRuleCall_3_1_0() { return cExpsExpressionParserRuleCall_3_1_0; }
		
		//(',' 'min_match' ':' INT | ',' 'operator' ':'
		//   op=Operator)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//',' 'min_match' ':' INT
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//','
		public Keyword getCommaKeyword_4_0_0() { return cCommaKeyword_4_0_0; }
		
		//'min_match'
		public Keyword getMin_matchKeyword_4_0_1() { return cMin_matchKeyword_4_0_1; }
		
		//':'
		public Keyword getColonKeyword_4_0_2() { return cColonKeyword_4_0_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_0_3() { return cINTTerminalRuleCall_4_0_3; }
		
		//',' 'operator' ':'
		//   op=Operator
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//'operator'
		public Keyword getOperatorKeyword_4_1_1() { return cOperatorKeyword_4_1_1; }
		
		//':'
		public Keyword getColonKeyword_4_1_2() { return cColonKeyword_4_1_2; }
		
		//op=Operator
		public Assignment getOpAssignment_4_1_3() { return cOpAssignment_4_1_3; }
		
		//Operator
		public RuleCall getOpOperatorParserRuleCall_4_1_3_0() { return cOpOperatorParserRuleCall_4_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class QualityMetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.QualityMetric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQualityMetricsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQExpQExpParserRuleCall_2_0 = (RuleCall)cQExpAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOperatorAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cOperatorOperatorParserRuleCall_3_0_0 = (RuleCall)cOperatorAssignment_3_0.eContents().get(0);
		private final Assignment cQExpsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cQExpsQExpParserRuleCall_3_1_0 = (RuleCall)cQExpsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//QualityMetric:
		//    'qualityMetrics' '(' qExp=QExp (operator=Operator qExps=QExp)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'qualityMetrics' '(' qExp=QExp (operator=Operator qExps=QExp)* ')'
		public Group getGroup() { return cGroup; }
		
		//'qualityMetrics'
		public Keyword getQualityMetricsKeyword_0() { return cQualityMetricsKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//qExp=QExp
		public Assignment getQExpAssignment_2() { return cQExpAssignment_2; }
		
		//QExp
		public RuleCall getQExpQExpParserRuleCall_2_0() { return cQExpQExpParserRuleCall_2_0; }
		
		//(operator=Operator qExps=QExp)*
		public Group getGroup_3() { return cGroup_3; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_3_0() { return cOperatorAssignment_3_0; }
		
		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_3_0_0() { return cOperatorOperatorParserRuleCall_3_0_0; }
		
		//qExps=QExp
		public Assignment getQExpsAssignment_3_1() { return cQExpsAssignment_3_1; }
		
		//QExp
		public RuleCall getQExpsQExpParserRuleCall_3_1_0() { return cQExpsQExpParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class TransformableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.Transformable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransformableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamTransParamParserRuleCall_2_0_0 = (RuleCall)cParamAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_2_0 = (RuleCall)cExpAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamTransParamParserRuleCall_3_1_0 = (RuleCall)cParamAssignment_3_1.eContents().get(0);
		private final Keyword cColonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cExpAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_3_3_0 = (RuleCall)cExpAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Transformable:
		//    'transformable' '(' (param=TransParam ':' exp=Expression) (',' param=TransParam ':' exp=Expression)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'transformable' '(' (param=TransParam ':' exp=Expression) (',' param=TransParam ':' exp=Expression)? ')'
		public Group getGroup() { return cGroup; }
		
		//'transformable'
		public Keyword getTransformableKeyword_0() { return cTransformableKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(param=TransParam ':' exp=Expression)
		public Group getGroup_2() { return cGroup_2; }
		
		//param=TransParam
		public Assignment getParamAssignment_2_0() { return cParamAssignment_2_0; }
		
		//TransParam
		public RuleCall getParamTransParamParserRuleCall_2_0_0() { return cParamTransParamParserRuleCall_2_0_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_2_2() { return cExpAssignment_2_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_2_0() { return cExpExpressionParserRuleCall_2_2_0; }
		
		//(',' param=TransParam ':' exp=Expression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//param=TransParam
		public Assignment getParamAssignment_3_1() { return cParamAssignment_3_1; }
		
		//TransParam
		public RuleCall getParamTransParamParserRuleCall_3_1_0() { return cParamTransParamParserRuleCall_3_1_0; }
		
		//':'
		public Keyword getColonKeyword_3_2() { return cColonKeyword_3_2; }
		
		//exp=Expression
		public Assignment getExpAssignment_3_3() { return cExpAssignment_3_3; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_3_3_0() { return cExpExpressionParserRuleCall_3_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class TransParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.TransParam");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeIdKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeNameKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		
		//TransParam:
		//    type=('id' | 'name');
		@Override public ParserRule getRule() { return rule; }
		
		//type=('id' | 'name')
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//('id' | 'name')
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//'id'
		public Keyword getTypeIdKeyword_0_0() { return cTypeIdKeyword_0_0; }
		
		//'name'
		public Keyword getTypeNameKeyword_0_1() { return cTypeNameKeyword_0_1; }
	}
	public class QExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.QExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQAttrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQAttrQattributeParserRuleCall_0_0 = (RuleCall)cQAttrAssignment_0.eContents().get(0);
		private final Assignment cCompAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCompComparisonParserRuleCall_1_0 = (RuleCall)cCompAssignment_1.eContents().get(0);
		private final Assignment cNAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNINTTerminalRuleCall_2_0 = (RuleCall)cNAssignment_2.eContents().get(0);
		
		//QExp:
		//    qAttr=Qattribute comp=Comparison n=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//qAttr=Qattribute comp=Comparison n=INT
		public Group getGroup() { return cGroup; }
		
		//qAttr=Qattribute
		public Assignment getQAttrAssignment_0() { return cQAttrAssignment_0; }
		
		//Qattribute
		public RuleCall getQAttrQattributeParserRuleCall_0_0() { return cQAttrQattributeParserRuleCall_0_0; }
		
		//comp=Comparison
		public Assignment getCompAssignment_1() { return cCompAssignment_1; }
		
		//Comparison
		public RuleCall getCompComparisonParserRuleCall_1_0() { return cCompComparisonParserRuleCall_1_0; }
		
		//n=INT
		public Assignment getNAssignment_2() { return cNAssignment_2; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_2_0() { return cNINTTerminalRuleCall_2_0; }
	}
	public class QattributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.Qattribute");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeQaKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeQbKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypeQcKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		private final Keyword cTypeQdKeyword_0_3 = (Keyword)cTypeAlternatives_0.eContents().get(3);
		private final Keyword cTypeQeKeyword_0_4 = (Keyword)cTypeAlternatives_0.eContents().get(4);
		private final Keyword cTypeQfKeyword_0_5 = (Keyword)cTypeAlternatives_0.eContents().get(5);
		private final Keyword cTypeQgKeyword_0_6 = (Keyword)cTypeAlternatives_0.eContents().get(6);
		private final Keyword cTypeQhKeyword_0_7 = (Keyword)cTypeAlternatives_0.eContents().get(7);
		private final Keyword cTypeQiKeyword_0_8 = (Keyword)cTypeAlternatives_0.eContents().get(8);
		private final Keyword cTypeQjKeyword_0_9 = (Keyword)cTypeAlternatives_0.eContents().get(9);
		private final Keyword cTypeQkKeyword_0_10 = (Keyword)cTypeAlternatives_0.eContents().get(10);
		private final Keyword cTypeQlKeyword_0_11 = (Keyword)cTypeAlternatives_0.eContents().get(11);
		private final Keyword cTypeQmKeyword_0_12 = (Keyword)cTypeAlternatives_0.eContents().get(12);
		private final Keyword cTypeQnKeyword_0_13 = (Keyword)cTypeAlternatives_0.eContents().get(13);
		private final Keyword cTypeQoKeyword_0_14 = (Keyword)cTypeAlternatives_0.eContents().get(14);
		private final Keyword cTypeQpKeyword_0_15 = (Keyword)cTypeAlternatives_0.eContents().get(15);
		private final Keyword cTypeQqKeyword_0_16 = (Keyword)cTypeAlternatives_0.eContents().get(16);
		private final Keyword cTypeQrKeyword_0_17 = (Keyword)cTypeAlternatives_0.eContents().get(17);
		private final Keyword cTypeQsKeyword_0_18 = (Keyword)cTypeAlternatives_0.eContents().get(18);
		private final Keyword cTypeQtKeyword_0_19 = (Keyword)cTypeAlternatives_0.eContents().get(19);
		private final Keyword cTypeQuKeyword_0_20 = (Keyword)cTypeAlternatives_0.eContents().get(20);
		private final Keyword cTypeQvKeyword_0_21 = (Keyword)cTypeAlternatives_0.eContents().get(21);
		
		//Qattribute:
		//    type=('qa' | 'qb' | 'qc' | 'qd' | 'qe' | 'qf' | 'qg' | 'qh' | 'qi' | 'qj' | 'qk' | 'ql' | 'qm' | 'qn' | 'qo' | 'qp'
		//    | 'qq' | 'qr' | 'qs' | 'qt' | 'qu' | 'qv');
		@Override public ParserRule getRule() { return rule; }
		
		//type=('qa' | 'qb' | 'qc' | 'qd' | 'qe' | 'qf' | 'qg' | 'qh' | 'qi' | 'qj' | 'qk' | 'ql' | 'qm' | 'qn' | 'qo' | 'qp'
		//| 'qq' | 'qr' | 'qs' | 'qt' | 'qu' | 'qv')
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//('qa' | 'qb' | 'qc' | 'qd' | 'qe' | 'qf' | 'qg' | 'qh' | 'qi' | 'qj' | 'qk' | 'ql' | 'qm' | 'qn' | 'qo' | 'qp'
		//    | 'qq' | 'qr' | 'qs' | 'qt' | 'qu' | 'qv')
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//'qa'
		public Keyword getTypeQaKeyword_0_0() { return cTypeQaKeyword_0_0; }
		
		//'qb'
		public Keyword getTypeQbKeyword_0_1() { return cTypeQbKeyword_0_1; }
		
		//'qc'
		public Keyword getTypeQcKeyword_0_2() { return cTypeQcKeyword_0_2; }
		
		//'qd'
		public Keyword getTypeQdKeyword_0_3() { return cTypeQdKeyword_0_3; }
		
		//'qe'
		public Keyword getTypeQeKeyword_0_4() { return cTypeQeKeyword_0_4; }
		
		//'qf'
		public Keyword getTypeQfKeyword_0_5() { return cTypeQfKeyword_0_5; }
		
		//'qg'
		public Keyword getTypeQgKeyword_0_6() { return cTypeQgKeyword_0_6; }
		
		//'qh'
		public Keyword getTypeQhKeyword_0_7() { return cTypeQhKeyword_0_7; }
		
		//'qi'
		public Keyword getTypeQiKeyword_0_8() { return cTypeQiKeyword_0_8; }
		
		//'qj'
		public Keyword getTypeQjKeyword_0_9() { return cTypeQjKeyword_0_9; }
		
		//'qk'
		public Keyword getTypeQkKeyword_0_10() { return cTypeQkKeyword_0_10; }
		
		//'ql'
		public Keyword getTypeQlKeyword_0_11() { return cTypeQlKeyword_0_11; }
		
		//'qm'
		public Keyword getTypeQmKeyword_0_12() { return cTypeQmKeyword_0_12; }
		
		//'qn'
		public Keyword getTypeQnKeyword_0_13() { return cTypeQnKeyword_0_13; }
		
		//'qo'
		public Keyword getTypeQoKeyword_0_14() { return cTypeQoKeyword_0_14; }
		
		//'qp'
		public Keyword getTypeQpKeyword_0_15() { return cTypeQpKeyword_0_15; }
		
		//'qq'
		public Keyword getTypeQqKeyword_0_16() { return cTypeQqKeyword_0_16; }
		
		//'qr'
		public Keyword getTypeQrKeyword_0_17() { return cTypeQrKeyword_0_17; }
		
		//'qs'
		public Keyword getTypeQsKeyword_0_18() { return cTypeQsKeyword_0_18; }
		
		//'qt'
		public Keyword getTypeQtKeyword_0_19() { return cTypeQtKeyword_0_19; }
		
		//'qu'
		public Keyword getTypeQuKeyword_0_20() { return cTypeQuKeyword_0_20; }
		
		//'qv'
		public Keyword getTypeQvKeyword_0_21() { return cTypeQvKeyword_0_21; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.Operator");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpANDKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpORKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final Keyword cOpEXACTKeyword_0_2 = (Keyword)cOpAlternatives_0.eContents().get(2);
		
		//Operator:
		//    op=('AND' | 'OR'| 'EXACT');
		@Override public ParserRule getRule() { return rule; }
		
		//op=('AND' | 'OR'| 'EXACT')
		public Assignment getOpAssignment() { return cOpAssignment; }
		
		//('AND' | 'OR'| 'EXACT')
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }
		
		//'AND'
		public Keyword getOpANDKeyword_0_0() { return cOpANDKeyword_0_0; }
		
		//'OR'
		public Keyword getOpORKeyword_0_1() { return cOpORKeyword_0_1; }
		
		//'EXACT'
		public Keyword getOpEXACTKeyword_0_2() { return cOpEXACTKeyword_0_2; }
	}
	public class FilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.Filter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFilterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFilterExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFilterExpFilterExpParserRuleCall_2_0 = (RuleCall)cFilterExpAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFilterExpsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFilterExpsFilterExpParserRuleCall_3_1_0 = (RuleCall)cFilterExpsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cSizeKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cColonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cCompAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cCompComparisonParserRuleCall_4_3_0 = (RuleCall)cCompAssignment_4_3.eContents().get(0);
		private final Assignment cExpAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cExpExpressionParserRuleCall_4_4_0 = (RuleCall)cExpAssignment_4_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Filter:
		//    'filter' '(' (filterExp=FilterExp)? (',' filterExps=FilterExp)? (',' 'size' ':' comp=Comparison exp=Expression) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'filter' '(' (filterExp=FilterExp)? (',' filterExps=FilterExp)? (',' 'size' ':' comp=Comparison exp=Expression) ')'
		public Group getGroup() { return cGroup; }
		
		//'filter'
		public Keyword getFilterKeyword_0() { return cFilterKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(filterExp=FilterExp)?
		public Assignment getFilterExpAssignment_2() { return cFilterExpAssignment_2; }
		
		//FilterExp
		public RuleCall getFilterExpFilterExpParserRuleCall_2_0() { return cFilterExpFilterExpParserRuleCall_2_0; }
		
		//(',' filterExps=FilterExp)?
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//filterExps=FilterExp
		public Assignment getFilterExpsAssignment_3_1() { return cFilterExpsAssignment_3_1; }
		
		//FilterExp
		public RuleCall getFilterExpsFilterExpParserRuleCall_3_1_0() { return cFilterExpsFilterExpParserRuleCall_3_1_0; }
		
		//(',' 'size' ':' comp=Comparison exp=Expression)
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//'size'
		public Keyword getSizeKeyword_4_1() { return cSizeKeyword_4_1; }
		
		//':'
		public Keyword getColonKeyword_4_2() { return cColonKeyword_4_2; }
		
		//comp=Comparison
		public Assignment getCompAssignment_4_3() { return cCompAssignment_4_3; }
		
		//Comparison
		public RuleCall getCompComparisonParserRuleCall_4_3_0() { return cCompComparisonParserRuleCall_4_3_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_4_4() { return cExpAssignment_4_4; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_4_4_0() { return cExpExpressionParserRuleCall_4_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class FilterExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.FilterExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFilterkeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFilterkeyFilterKeywordParserRuleCall_0_0 = (RuleCall)cFilterkeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//FilterExp:
		//    filterkey=FilterKeyword ':' exp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//filterkey=FilterKeyword ':' exp=Expression
		public Group getGroup() { return cGroup; }
		
		//filterkey=FilterKeyword
		public Assignment getFilterkeyAssignment_0() { return cFilterkeyAssignment_0; }
		
		//FilterKeyword
		public RuleCall getFilterkeyFilterKeywordParserRuleCall_0_0() { return cFilterkeyFilterKeywordParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.Comparison");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeEqualsSignEqualsSignKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeGreaterThanSignEqualsSignKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypeLessThanSignEqualsSignKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		private final Keyword cTypeLessThanSignKeyword_0_3 = (Keyword)cTypeAlternatives_0.eContents().get(3);
		private final Keyword cTypeGreaterThanSignKeyword_0_4 = (Keyword)cTypeAlternatives_0.eContents().get(4);
		
		//Comparison:
		//    type=('==' | '>=' | '<=' | '<' | '>');
		@Override public ParserRule getRule() { return rule; }
		
		//type=('==' | '>=' | '<=' | '<' | '>')
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//('==' | '>=' | '<=' | '<' | '>')
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//'=='
		public Keyword getTypeEqualsSignEqualsSignKeyword_0_0() { return cTypeEqualsSignEqualsSignKeyword_0_0; }
		
		//'>='
		public Keyword getTypeGreaterThanSignEqualsSignKeyword_0_1() { return cTypeGreaterThanSignEqualsSignKeyword_0_1; }
		
		//'<='
		public Keyword getTypeLessThanSignEqualsSignKeyword_0_2() { return cTypeLessThanSignEqualsSignKeyword_0_2; }
		
		//'<'
		public Keyword getTypeLessThanSignKeyword_0_3() { return cTypeLessThanSignKeyword_0_3; }
		
		//'>'
		public Keyword getTypeGreaterThanSignKeyword_0_4() { return cTypeGreaterThanSignKeyword_0_4; }
	}
	public class FilterKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.FilterKeyword");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeGteKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeLteKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypeLtKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		private final Keyword cTypeGtKeyword_0_3 = (Keyword)cTypeAlternatives_0.eContents().get(3);
		
		//FilterKeyword:
		//    type=('gte' | 'lte' | 'lt' | 'gt');
		@Override public ParserRule getRule() { return rule; }
		
		//type=('gte' | 'lte' | 'lt' | 'gt')
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//('gte' | 'lte' | 'lt' | 'gt')
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//'gte'
		public Keyword getTypeGteKeyword_0_0() { return cTypeGteKeyword_0_0; }
		
		//'lte'
		public Keyword getTypeLteKeyword_0_1() { return cTypeLteKeyword_0_1; }
		
		//'lt'
		public Keyword getTypeLtKeyword_0_2() { return cTypeLtKeyword_0_2; }
		
		//'gt'
		public Keyword getTypeGtKeyword_0_3() { return cTypeGtKeyword_0_3; }
	}
	public class ArtifactTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.ArtifactType");
		private final Assignment cTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeNameAlternatives_0 = (Alternatives)cTypeNameAssignment.eContents().get(0);
		private final Keyword cTypeNameModelKeyword_0_0 = (Keyword)cTypeNameAlternatives_0.eContents().get(0);
		private final Keyword cTypeNameMetamodelKeyword_0_1 = (Keyword)cTypeNameAlternatives_0.eContents().get(1);
		private final Keyword cTypeNameDslKeyword_0_2 = (Keyword)cTypeNameAlternatives_0.eContents().get(2);
		
		//// ------------------------------------------------------------
		//ArtifactType:
		//    typeName=('Model' | 'Metamodel' | 'Dsl');
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=('Model' | 'Metamodel' | 'Dsl')
		public Assignment getTypeNameAssignment() { return cTypeNameAssignment; }
		
		//('Model' | 'Metamodel' | 'Dsl')
		public Alternatives getTypeNameAlternatives_0() { return cTypeNameAlternatives_0; }
		
		//'Model'
		public Keyword getTypeNameModelKeyword_0_0() { return cTypeNameModelKeyword_0_0; }
		
		//'Metamodel'
		public Keyword getTypeNameMetamodelKeyword_0_1() { return cTypeNameMetamodelKeyword_0_1; }
		
		//'Dsl'
		public Keyword getTypeNameDslKeyword_0_2() { return cTypeNameDslKeyword_0_2; }
	}
	public class UserVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.UserVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUserParamParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//// Object vars
		//UserVar:
		//    UserParam ':' exp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//UserParam ':' exp=Expression
		public Group getGroup() { return cGroup; }
		
		//UserParam
		public RuleCall getUserParamParserRuleCall_0() { return cUserParamParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
	}
	public class WorkspaceVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.WorkspaceVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWorkspaceParamParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//WorkspaceVar:
		//    WorkspaceParam ':' exp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//WorkspaceParam ':' exp=Expression
		public Group getGroup() { return cGroup; }
		
		//WorkspaceParam
		public RuleCall getWorkspaceParamParserRuleCall_0() { return cWorkspaceParamParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
	}
	public class ProjectVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.ProjectVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cProjectParamParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//ProjectVar:
		//    ProjectParam ':' exp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//ProjectParam ':' exp=Expression
		public Group getGroup() { return cGroup; }
		
		//ProjectParam
		public RuleCall getProjectParamParserRuleCall_0() { return cProjectParamParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
	}
	public class MetamodelVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.MetamodelVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMetamodelParamParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//MetamodelVar:
		//    MetamodelParam ':' exp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//MetamodelParam ':' exp=Expression
		public Group getGroup() { return cGroup; }
		
		//MetamodelParam
		public RuleCall getMetamodelParamParserRuleCall_0() { return cMetamodelParamParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
	}
	public class ModelVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.ModelVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParamParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//ModelVar:
		//    Param ':' exp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Param ':' exp=Expression
		public Group getGroup() { return cGroup; }
		
		//Param
		public RuleCall getParamParserRuleCall_0() { return cParamParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
	}
	public class DslVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.DslVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParamParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//DslVar:
		//    Param ':' exp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Param ':' exp=Expression
		public Group getGroup() { return cGroup; }
		
		//Param
		public RuleCall getParamParserRuleCall_0() { return cParamParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
	}
	public class UserFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.UserField");
		private final Assignment cTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeNameAlternatives_0 = (Alternatives)cTypeNameAssignment.eContents().get(0);
		private final Keyword cTypeNameIdKeyword_0_0 = (Keyword)cTypeNameAlternatives_0.eContents().get(0);
		private final Keyword cTypeNameUsernameKeyword_0_1 = (Keyword)cTypeNameAlternatives_0.eContents().get(1);
		private final Keyword cTypeNameEmailKeyword_0_2 = (Keyword)cTypeNameAlternatives_0.eContents().get(2);
		private final Keyword cTypeNameCreatedAtKeyword_0_3 = (Keyword)cTypeNameAlternatives_0.eContents().get(3);
		private final Keyword cTypeNameUpdatedAtKeyword_0_4 = (Keyword)cTypeNameAlternatives_0.eContents().get(4);
		
		//// Object fields
		//UserField:
		//    typeName=('id' | 'username' | 'email' | 'createdAt' | 'updatedAt');
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=('id' | 'username' | 'email' | 'createdAt' | 'updatedAt')
		public Assignment getTypeNameAssignment() { return cTypeNameAssignment; }
		
		//('id' | 'username' | 'email' | 'createdAt' | 'updatedAt')
		public Alternatives getTypeNameAlternatives_0() { return cTypeNameAlternatives_0; }
		
		//'id'
		public Keyword getTypeNameIdKeyword_0_0() { return cTypeNameIdKeyword_0_0; }
		
		//'username'
		public Keyword getTypeNameUsernameKeyword_0_1() { return cTypeNameUsernameKeyword_0_1; }
		
		//'email'
		public Keyword getTypeNameEmailKeyword_0_2() { return cTypeNameEmailKeyword_0_2; }
		
		//'createdAt'
		public Keyword getTypeNameCreatedAtKeyword_0_3() { return cTypeNameCreatedAtKeyword_0_3; }
		
		//'updatedAt'
		public Keyword getTypeNameUpdatedAtKeyword_0_4() { return cTypeNameUpdatedAtKeyword_0_4; }
	}
	public class WorkspaceFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.WorkspaceField");
		private final Assignment cTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeNameAlternatives_0 = (Alternatives)cTypeNameAssignment.eContents().get(0);
		private final Keyword cTypeNameIdKeyword_0_0 = (Keyword)cTypeNameAlternatives_0.eContents().get(0);
		private final Keyword cTypeNameNameKeyword_0_1 = (Keyword)cTypeNameAlternatives_0.eContents().get(1);
		private final Keyword cTypeNameDescriptionKeyword_0_2 = (Keyword)cTypeNameAlternatives_0.eContents().get(2);
		private final Keyword cTypeNameOwnerKeyword_0_3 = (Keyword)cTypeNameAlternatives_0.eContents().get(3);
		private final Keyword cTypeNameProjectsKeyword_0_4 = (Keyword)cTypeNameAlternatives_0.eContents().get(4);
		private final Keyword cTypeNameCreatedAtKeyword_0_5 = (Keyword)cTypeNameAlternatives_0.eContents().get(5);
		private final Keyword cTypeNameUpdatedAtKeyword_0_6 = (Keyword)cTypeNameAlternatives_0.eContents().get(6);
		
		//WorkspaceField:
		//    typeName=('id' | 'name' | 'description' | 'owner' | 'projects' | 'createdAt' | 'updatedAt');
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=('id' | 'name' | 'description' | 'owner' | 'projects' | 'createdAt' | 'updatedAt')
		public Assignment getTypeNameAssignment() { return cTypeNameAssignment; }
		
		//('id' | 'name' | 'description' | 'owner' | 'projects' | 'createdAt' | 'updatedAt')
		public Alternatives getTypeNameAlternatives_0() { return cTypeNameAlternatives_0; }
		
		//'id'
		public Keyword getTypeNameIdKeyword_0_0() { return cTypeNameIdKeyword_0_0; }
		
		//'name'
		public Keyword getTypeNameNameKeyword_0_1() { return cTypeNameNameKeyword_0_1; }
		
		//'description'
		public Keyword getTypeNameDescriptionKeyword_0_2() { return cTypeNameDescriptionKeyword_0_2; }
		
		//'owner'
		public Keyword getTypeNameOwnerKeyword_0_3() { return cTypeNameOwnerKeyword_0_3; }
		
		//'projects'
		public Keyword getTypeNameProjectsKeyword_0_4() { return cTypeNameProjectsKeyword_0_4; }
		
		//'createdAt'
		public Keyword getTypeNameCreatedAtKeyword_0_5() { return cTypeNameCreatedAtKeyword_0_5; }
		
		//'updatedAt'
		public Keyword getTypeNameUpdatedAtKeyword_0_6() { return cTypeNameUpdatedAtKeyword_0_6; }
	}
	public class ProjectFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.ProjectField");
		private final Assignment cTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeNameAlternatives_0 = (Alternatives)cTypeNameAssignment.eContents().get(0);
		private final Keyword cTypeNameIdKeyword_0_0 = (Keyword)cTypeNameAlternatives_0.eContents().get(0);
		private final Keyword cTypeNameNameKeyword_0_1 = (Keyword)cTypeNameAlternatives_0.eContents().get(1);
		private final Keyword cTypeNameDescriptionKeyword_0_2 = (Keyword)cTypeNameAlternatives_0.eContents().get(2);
		private final Keyword cTypeNameUserKeyword_0_3 = (Keyword)cTypeNameAlternatives_0.eContents().get(3);
		private final Keyword cTypeNameWorkspaceKeyword_0_4 = (Keyword)cTypeNameAlternatives_0.eContents().get(4);
		private final Keyword cTypeNameSharedUserKeyword_0_5 = (Keyword)cTypeNameAlternatives_0.eContents().get(5);
		private final Keyword cTypeNameCommentsKeyword_0_6 = (Keyword)cTypeNameAlternatives_0.eContents().get(6);
		private final Keyword cTypeNameCreatedAtKeyword_0_7 = (Keyword)cTypeNameAlternatives_0.eContents().get(7);
		private final Keyword cTypeNameUpdatedAtKeyword_0_8 = (Keyword)cTypeNameAlternatives_0.eContents().get(8);
		
		//ProjectField:
		//    typeName=('id' | 'name' | 'description' | 'user' | 'workspace' | 'sharedUser' | 'comments' | 'createdAt' |
		//    'updatedAt');
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=('id' | 'name' | 'description' | 'user' | 'workspace' | 'sharedUser' | 'comments' | 'createdAt' |
		//'updatedAt')
		public Assignment getTypeNameAssignment() { return cTypeNameAssignment; }
		
		//('id' | 'name' | 'description' | 'user' | 'workspace' | 'sharedUser' | 'comments' | 'createdAt' |
		//    'updatedAt')
		public Alternatives getTypeNameAlternatives_0() { return cTypeNameAlternatives_0; }
		
		//'id'
		public Keyword getTypeNameIdKeyword_0_0() { return cTypeNameIdKeyword_0_0; }
		
		//'name'
		public Keyword getTypeNameNameKeyword_0_1() { return cTypeNameNameKeyword_0_1; }
		
		//'description'
		public Keyword getTypeNameDescriptionKeyword_0_2() { return cTypeNameDescriptionKeyword_0_2; }
		
		//'user'
		public Keyword getTypeNameUserKeyword_0_3() { return cTypeNameUserKeyword_0_3; }
		
		//'workspace'
		public Keyword getTypeNameWorkspaceKeyword_0_4() { return cTypeNameWorkspaceKeyword_0_4; }
		
		//'sharedUser'
		public Keyword getTypeNameSharedUserKeyword_0_5() { return cTypeNameSharedUserKeyword_0_5; }
		
		//'comments'
		public Keyword getTypeNameCommentsKeyword_0_6() { return cTypeNameCommentsKeyword_0_6; }
		
		//'createdAt'
		public Keyword getTypeNameCreatedAtKeyword_0_7() { return cTypeNameCreatedAtKeyword_0_7; }
		
		//'updatedAt'
		public Keyword getTypeNameUpdatedAtKeyword_0_8() { return cTypeNameUpdatedAtKeyword_0_8; }
	}
	public class MetamodelFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.MetamodelField");
		private final Assignment cTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeNameAlternatives_0 = (Alternatives)cTypeNameAssignment.eContents().get(0);
		private final Keyword cTypeNameIdKeyword_0_0 = (Keyword)cTypeNameAlternatives_0.eContents().get(0);
		private final Keyword cTypeNameAccessControlKeyword_0_1 = (Keyword)cTypeNameAlternatives_0.eContents().get(1);
		private final Keyword cTypeNameDescriptionKeyword_0_2 = (Keyword)cTypeNameAlternatives_0.eContents().get(2);
		private final Keyword cTypeNameEPackageKeyword_0_3 = (Keyword)cTypeNameAlternatives_0.eContents().get(3);
		private final Keyword cTypeNameExtKeyword_0_4 = (Keyword)cTypeNameAlternatives_0.eContents().get(4);
		private final Keyword cTypeNameInvolvedOperationsKeyword_0_5 = (Keyword)cTypeNameAlternatives_0.eContents().get(5);
		private final Keyword cTypeNameMetricsKeyword_0_6 = (Keyword)cTypeNameAlternatives_0.eContents().get(6);
		private final Keyword cTypeNameModelsKeyword_0_7 = (Keyword)cTypeNameAlternatives_0.eContents().get(7);
		private final Keyword cTypeNameLicenseKeyword_0_8 = (Keyword)cTypeNameAlternatives_0.eContents().get(8);
		private final Keyword cTypeNameMetamodelKeyword_0_9 = (Keyword)cTypeNameAlternatives_0.eContents().get(9);
		private final Keyword cTypeNameNameKeyword_0_10 = (Keyword)cTypeNameAlternatives_0.eContents().get(10);
		private final Keyword cTypeNameProjectKeyword_0_11 = (Keyword)cTypeNameAlternatives_0.eContents().get(11);
		private final Keyword cTypeNameSizeKeyword_0_12 = (Keyword)cTypeNameAlternatives_0.eContents().get(12);
		private final Keyword cTypeNameStorageUrlKeyword_0_13 = (Keyword)cTypeNameAlternatives_0.eContents().get(13);
		private final Keyword cTypeNameTypeKeyword_0_14 = (Keyword)cTypeNameAlternatives_0.eContents().get(14);
		private final Keyword cTypeNameUnique_nameKeyword_0_15 = (Keyword)cTypeNameAlternatives_0.eContents().get(15);
		private final Keyword cTypeNameCreatedAtKeyword_0_16 = (Keyword)cTypeNameAlternatives_0.eContents().get(16);
		private final Keyword cTypeNameUpdatedAtKeyword_0_17 = (Keyword)cTypeNameAlternatives_0.eContents().get(17);
		
		////ArtifactField:
		////    MetamodelField | ModelField | DslField
		////    ;
		//MetamodelField:
		//    typeName=('id' | 'accessControl' | 'description' | 'ePackage' | 'ext' | 'involvedOperations' | 'metrics' | 'models'
		//    | 'license' | 'metamodel' | 'name' | 'project' | 'size' | 'storageUrl' | 'type' | 'unique_name' | 'createdAt' |
		//    'updatedAt');
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=('id' | 'accessControl' | 'description' | 'ePackage' | 'ext' | 'involvedOperations' | 'metrics' | 'models'
		//| 'license' | 'metamodel' | 'name' | 'project' | 'size' | 'storageUrl' | 'type' | 'unique_name' | 'createdAt' |
		//'updatedAt')
		public Assignment getTypeNameAssignment() { return cTypeNameAssignment; }
		
		//('id' | 'accessControl' | 'description' | 'ePackage' | 'ext' | 'involvedOperations' | 'metrics' | 'models'
		//    | 'license' | 'metamodel' | 'name' | 'project' | 'size' | 'storageUrl' | 'type' | 'unique_name' | 'createdAt' |
		//    'updatedAt')
		public Alternatives getTypeNameAlternatives_0() { return cTypeNameAlternatives_0; }
		
		//'id'
		public Keyword getTypeNameIdKeyword_0_0() { return cTypeNameIdKeyword_0_0; }
		
		//'accessControl'
		public Keyword getTypeNameAccessControlKeyword_0_1() { return cTypeNameAccessControlKeyword_0_1; }
		
		//'description'
		public Keyword getTypeNameDescriptionKeyword_0_2() { return cTypeNameDescriptionKeyword_0_2; }
		
		//'ePackage'
		public Keyword getTypeNameEPackageKeyword_0_3() { return cTypeNameEPackageKeyword_0_3; }
		
		//'ext'
		public Keyword getTypeNameExtKeyword_0_4() { return cTypeNameExtKeyword_0_4; }
		
		//'involvedOperations'
		public Keyword getTypeNameInvolvedOperationsKeyword_0_5() { return cTypeNameInvolvedOperationsKeyword_0_5; }
		
		//'metrics'
		public Keyword getTypeNameMetricsKeyword_0_6() { return cTypeNameMetricsKeyword_0_6; }
		
		//'models'
		public Keyword getTypeNameModelsKeyword_0_7() { return cTypeNameModelsKeyword_0_7; }
		
		//'license'
		public Keyword getTypeNameLicenseKeyword_0_8() { return cTypeNameLicenseKeyword_0_8; }
		
		//'metamodel'
		public Keyword getTypeNameMetamodelKeyword_0_9() { return cTypeNameMetamodelKeyword_0_9; }
		
		//'name'
		public Keyword getTypeNameNameKeyword_0_10() { return cTypeNameNameKeyword_0_10; }
		
		//'project'
		public Keyword getTypeNameProjectKeyword_0_11() { return cTypeNameProjectKeyword_0_11; }
		
		//'size'
		public Keyword getTypeNameSizeKeyword_0_12() { return cTypeNameSizeKeyword_0_12; }
		
		//'storageUrl'
		public Keyword getTypeNameStorageUrlKeyword_0_13() { return cTypeNameStorageUrlKeyword_0_13; }
		
		//'type'
		public Keyword getTypeNameTypeKeyword_0_14() { return cTypeNameTypeKeyword_0_14; }
		
		//'unique_name'
		public Keyword getTypeNameUnique_nameKeyword_0_15() { return cTypeNameUnique_nameKeyword_0_15; }
		
		//'createdAt'
		public Keyword getTypeNameCreatedAtKeyword_0_16() { return cTypeNameCreatedAtKeyword_0_16; }
		
		//'updatedAt'
		public Keyword getTypeNameUpdatedAtKeyword_0_17() { return cTypeNameUpdatedAtKeyword_0_17; }
	}
	public class ModelFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.ModelField");
		private final Assignment cTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeNameAlternatives_0 = (Alternatives)cTypeNameAssignment.eContents().get(0);
		private final Keyword cTypeNameIdKeyword_0_0 = (Keyword)cTypeNameAlternatives_0.eContents().get(0);
		private final Keyword cTypeNameAccessControlKeyword_0_1 = (Keyword)cTypeNameAlternatives_0.eContents().get(1);
		private final Keyword cTypeNameDescriptionKeyword_0_2 = (Keyword)cTypeNameAlternatives_0.eContents().get(2);
		private final Keyword cTypeNameExtKeyword_0_3 = (Keyword)cTypeNameAlternatives_0.eContents().get(3);
		private final Keyword cTypeNameInvolvedOperationsKeyword_0_4 = (Keyword)cTypeNameAlternatives_0.eContents().get(4);
		private final Keyword cTypeNameLicenseKeyword_0_5 = (Keyword)cTypeNameAlternatives_0.eContents().get(5);
		private final Keyword cTypeNameMetamodelKeyword_0_6 = (Keyword)cTypeNameAlternatives_0.eContents().get(6);
		private final Keyword cTypeNameNameKeyword_0_7 = (Keyword)cTypeNameAlternatives_0.eContents().get(7);
		private final Keyword cTypeNameProjectKeyword_0_8 = (Keyword)cTypeNameAlternatives_0.eContents().get(8);
		private final Keyword cTypeNameSizeKeyword_0_9 = (Keyword)cTypeNameAlternatives_0.eContents().get(9);
		private final Keyword cTypeNameStorageUrlKeyword_0_10 = (Keyword)cTypeNameAlternatives_0.eContents().get(10);
		private final Keyword cTypeNameTypeKeyword_0_11 = (Keyword)cTypeNameAlternatives_0.eContents().get(11);
		private final Keyword cTypeNameUnique_nameKeyword_0_12 = (Keyword)cTypeNameAlternatives_0.eContents().get(12);
		private final Keyword cTypeNameCreatedAtKeyword_0_13 = (Keyword)cTypeNameAlternatives_0.eContents().get(13);
		private final Keyword cTypeNameUpdatedAtKeyword_0_14 = (Keyword)cTypeNameAlternatives_0.eContents().get(14);
		
		//ModelField:
		//    typeName=('id' | 'accessControl' | 'description' | 'ext' | 'involvedOperations' | 'license' | 'metamodel' | 'name' |
		//    'project' | 'size' | 'storageUrl' | 'type' | 'unique_name' | 'createdAt' | 'updatedAt');
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=('id' | 'accessControl' | 'description' | 'ext' | 'involvedOperations' | 'license' | 'metamodel' | 'name' |
		//'project' | 'size' | 'storageUrl' | 'type' | 'unique_name' | 'createdAt' | 'updatedAt')
		public Assignment getTypeNameAssignment() { return cTypeNameAssignment; }
		
		//('id' | 'accessControl' | 'description' | 'ext' | 'involvedOperations' | 'license' | 'metamodel' | 'name' |
		//    'project' | 'size' | 'storageUrl' | 'type' | 'unique_name' | 'createdAt' | 'updatedAt')
		public Alternatives getTypeNameAlternatives_0() { return cTypeNameAlternatives_0; }
		
		//'id'
		public Keyword getTypeNameIdKeyword_0_0() { return cTypeNameIdKeyword_0_0; }
		
		//'accessControl'
		public Keyword getTypeNameAccessControlKeyword_0_1() { return cTypeNameAccessControlKeyword_0_1; }
		
		//'description'
		public Keyword getTypeNameDescriptionKeyword_0_2() { return cTypeNameDescriptionKeyword_0_2; }
		
		//'ext'
		public Keyword getTypeNameExtKeyword_0_3() { return cTypeNameExtKeyword_0_3; }
		
		//'involvedOperations'
		public Keyword getTypeNameInvolvedOperationsKeyword_0_4() { return cTypeNameInvolvedOperationsKeyword_0_4; }
		
		//'license'
		public Keyword getTypeNameLicenseKeyword_0_5() { return cTypeNameLicenseKeyword_0_5; }
		
		//'metamodel'
		public Keyword getTypeNameMetamodelKeyword_0_6() { return cTypeNameMetamodelKeyword_0_6; }
		
		//'name'
		public Keyword getTypeNameNameKeyword_0_7() { return cTypeNameNameKeyword_0_7; }
		
		//'project'
		public Keyword getTypeNameProjectKeyword_0_8() { return cTypeNameProjectKeyword_0_8; }
		
		//'size'
		public Keyword getTypeNameSizeKeyword_0_9() { return cTypeNameSizeKeyword_0_9; }
		
		//'storageUrl'
		public Keyword getTypeNameStorageUrlKeyword_0_10() { return cTypeNameStorageUrlKeyword_0_10; }
		
		//'type'
		public Keyword getTypeNameTypeKeyword_0_11() { return cTypeNameTypeKeyword_0_11; }
		
		//'unique_name'
		public Keyword getTypeNameUnique_nameKeyword_0_12() { return cTypeNameUnique_nameKeyword_0_12; }
		
		//'createdAt'
		public Keyword getTypeNameCreatedAtKeyword_0_13() { return cTypeNameCreatedAtKeyword_0_13; }
		
		//'updatedAt'
		public Keyword getTypeNameUpdatedAtKeyword_0_14() { return cTypeNameUpdatedAtKeyword_0_14; }
	}
	public class DslFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.DslField");
		private final Assignment cTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeNameAlternatives_0 = (Alternatives)cTypeNameAssignment.eContents().get(0);
		private final Keyword cTypeNameIdKeyword_0_0 = (Keyword)cTypeNameAlternatives_0.eContents().get(0);
		private final Keyword cTypeNameAccessControlKeyword_0_1 = (Keyword)cTypeNameAlternatives_0.eContents().get(1);
		private final Keyword cTypeNameDescriptionKeyword_0_2 = (Keyword)cTypeNameAlternatives_0.eContents().get(2);
		private final Keyword cTypeNameExtKeyword_0_3 = (Keyword)cTypeNameAlternatives_0.eContents().get(3);
		private final Keyword cTypeNameInvolvedOperationsKeyword_0_4 = (Keyword)cTypeNameAlternatives_0.eContents().get(4);
		private final Keyword cTypeNameLicenseKeyword_0_5 = (Keyword)cTypeNameAlternatives_0.eContents().get(5);
		private final Keyword cTypeNameNameKeyword_0_6 = (Keyword)cTypeNameAlternatives_0.eContents().get(6);
		private final Keyword cTypeNameProjectKeyword_0_7 = (Keyword)cTypeNameAlternatives_0.eContents().get(7);
		private final Keyword cTypeNameSizeKeyword_0_8 = (Keyword)cTypeNameAlternatives_0.eContents().get(8);
		private final Keyword cTypeNameStorageUrlKeyword_0_9 = (Keyword)cTypeNameAlternatives_0.eContents().get(9);
		private final Keyword cTypeNameTypeKeyword_0_10 = (Keyword)cTypeNameAlternatives_0.eContents().get(10);
		private final Keyword cTypeNameUnique_nameKeyword_0_11 = (Keyword)cTypeNameAlternatives_0.eContents().get(11);
		private final Keyword cTypeNameCreatedAtKeyword_0_12 = (Keyword)cTypeNameAlternatives_0.eContents().get(12);
		private final Keyword cTypeNameUpdatedAtKeyword_0_13 = (Keyword)cTypeNameAlternatives_0.eContents().get(13);
		
		//DslField:
		//    typeName=('id' | 'accessControl' | 'description' | 'ext' | 'involvedOperations' | 'license' | 'name' | 'project' |
		//    'size' | 'storageUrl' | 'type' | 'unique_name' | 'createdAt' | 'updatedAt');
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=('id' | 'accessControl' | 'description' | 'ext' | 'involvedOperations' | 'license' | 'name' | 'project' |
		//'size' | 'storageUrl' | 'type' | 'unique_name' | 'createdAt' | 'updatedAt')
		public Assignment getTypeNameAssignment() { return cTypeNameAssignment; }
		
		//('id' | 'accessControl' | 'description' | 'ext' | 'involvedOperations' | 'license' | 'name' | 'project' |
		//    'size' | 'storageUrl' | 'type' | 'unique_name' | 'createdAt' | 'updatedAt')
		public Alternatives getTypeNameAlternatives_0() { return cTypeNameAlternatives_0; }
		
		//'id'
		public Keyword getTypeNameIdKeyword_0_0() { return cTypeNameIdKeyword_0_0; }
		
		//'accessControl'
		public Keyword getTypeNameAccessControlKeyword_0_1() { return cTypeNameAccessControlKeyword_0_1; }
		
		//'description'
		public Keyword getTypeNameDescriptionKeyword_0_2() { return cTypeNameDescriptionKeyword_0_2; }
		
		//'ext'
		public Keyword getTypeNameExtKeyword_0_3() { return cTypeNameExtKeyword_0_3; }
		
		//'involvedOperations'
		public Keyword getTypeNameInvolvedOperationsKeyword_0_4() { return cTypeNameInvolvedOperationsKeyword_0_4; }
		
		//'license'
		public Keyword getTypeNameLicenseKeyword_0_5() { return cTypeNameLicenseKeyword_0_5; }
		
		//'name'
		public Keyword getTypeNameNameKeyword_0_6() { return cTypeNameNameKeyword_0_6; }
		
		//'project'
		public Keyword getTypeNameProjectKeyword_0_7() { return cTypeNameProjectKeyword_0_7; }
		
		//'size'
		public Keyword getTypeNameSizeKeyword_0_8() { return cTypeNameSizeKeyword_0_8; }
		
		//'storageUrl'
		public Keyword getTypeNameStorageUrlKeyword_0_9() { return cTypeNameStorageUrlKeyword_0_9; }
		
		//'type'
		public Keyword getTypeNameTypeKeyword_0_10() { return cTypeNameTypeKeyword_0_10; }
		
		//'unique_name'
		public Keyword getTypeNameUnique_nameKeyword_0_11() { return cTypeNameUnique_nameKeyword_0_11; }
		
		//'createdAt'
		public Keyword getTypeNameCreatedAtKeyword_0_12() { return cTypeNameCreatedAtKeyword_0_12; }
		
		//'updatedAt'
		public Keyword getTypeNameUpdatedAtKeyword_0_13() { return cTypeNameUpdatedAtKeyword_0_13; }
	}
	public class UserParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.UserParam");
		private final Assignment cTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeNameAlternatives_0 = (Alternatives)cTypeNameAssignment.eContents().get(0);
		private final Keyword cTypeNameUsernameKeyword_0_0 = (Keyword)cTypeNameAlternatives_0.eContents().get(0);
		private final Keyword cTypeNameUserIdKeyword_0_1 = (Keyword)cTypeNameAlternatives_0.eContents().get(1);
		private final Keyword cTypeNameEmailKeyword_0_2 = (Keyword)cTypeNameAlternatives_0.eContents().get(2);
		
		//// Object Params
		//UserParam:
		//    typeName=('username' | 'userId' | 'email');
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=('username' | 'userId' | 'email')
		public Assignment getTypeNameAssignment() { return cTypeNameAssignment; }
		
		//('username' | 'userId' | 'email')
		public Alternatives getTypeNameAlternatives_0() { return cTypeNameAlternatives_0; }
		
		//'username'
		public Keyword getTypeNameUsernameKeyword_0_0() { return cTypeNameUsernameKeyword_0_0; }
		
		//'userId'
		public Keyword getTypeNameUserIdKeyword_0_1() { return cTypeNameUserIdKeyword_0_1; }
		
		//'email'
		public Keyword getTypeNameEmailKeyword_0_2() { return cTypeNameEmailKeyword_0_2; }
	}
	public class WorkspaceParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.WorkspaceParam");
		private final Assignment cTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeNameAlternatives_0 = (Alternatives)cTypeNameAssignment.eContents().get(0);
		private final Keyword cTypeNameOwnerKeyword_0_0 = (Keyword)cTypeNameAlternatives_0.eContents().get(0);
		private final Keyword cTypeNameWorkspaceIdKeyword_0_1 = (Keyword)cTypeNameAlternatives_0.eContents().get(1);
		
		//WorkspaceParam:
		//    typeName=('owner' | 'workspaceId');
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=('owner' | 'workspaceId')
		public Assignment getTypeNameAssignment() { return cTypeNameAssignment; }
		
		//('owner' | 'workspaceId')
		public Alternatives getTypeNameAlternatives_0() { return cTypeNameAlternatives_0; }
		
		//'owner'
		public Keyword getTypeNameOwnerKeyword_0_0() { return cTypeNameOwnerKeyword_0_0; }
		
		//'workspaceId'
		public Keyword getTypeNameWorkspaceIdKeyword_0_1() { return cTypeNameWorkspaceIdKeyword_0_1; }
	}
	public class ProjectParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.ProjectParam");
		private final Assignment cTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeNameAlternatives_0 = (Alternatives)cTypeNameAssignment.eContents().get(0);
		private final Keyword cTypeNameUsernameKeyword_0_0 = (Keyword)cTypeNameAlternatives_0.eContents().get(0);
		private final Keyword cTypeNameUserIdKeyword_0_1 = (Keyword)cTypeNameAlternatives_0.eContents().get(1);
		private final Keyword cTypeNameWorkspaceIdKeyword_0_2 = (Keyword)cTypeNameAlternatives_0.eContents().get(2);
		private final Keyword cTypeNameProjectIdKeyword_0_3 = (Keyword)cTypeNameAlternatives_0.eContents().get(3);
		
		//ProjectParam:
		//    typeName=('username' | 'userId' | 'workspaceId' | 'projectId');
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=('username' | 'userId' | 'workspaceId' | 'projectId')
		public Assignment getTypeNameAssignment() { return cTypeNameAssignment; }
		
		//('username' | 'userId' | 'workspaceId' | 'projectId')
		public Alternatives getTypeNameAlternatives_0() { return cTypeNameAlternatives_0; }
		
		//'username'
		public Keyword getTypeNameUsernameKeyword_0_0() { return cTypeNameUsernameKeyword_0_0; }
		
		//'userId'
		public Keyword getTypeNameUserIdKeyword_0_1() { return cTypeNameUserIdKeyword_0_1; }
		
		//'workspaceId'
		public Keyword getTypeNameWorkspaceIdKeyword_0_2() { return cTypeNameWorkspaceIdKeyword_0_2; }
		
		//'projectId'
		public Keyword getTypeNameProjectIdKeyword_0_3() { return cTypeNameProjectIdKeyword_0_3; }
	}
	public class MetamodelParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.MetamodelParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMetaParamParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParamParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////ArtifactParam:
		////    MetamodelParam ; // | DslParam;
		//MetamodelParam:
		//    MetaParam | Param;
		@Override public ParserRule getRule() { return rule; }
		
		//MetaParam | Param
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MetaParam
		public RuleCall getMetaParamParserRuleCall_0() { return cMetaParamParserRuleCall_0; }
		
		//Param
		public RuleCall getParamParserRuleCall_1() { return cParamParserRuleCall_1; }
	}
	public class MetaParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.MetaParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEClassifierKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEPackageNameKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEPackageNsURIKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cEPackageNsPrefixKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cQualityMetricKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cModelKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//MetaParam:
		//    'eClassifier' | 'ePackageName' | 'ePackageNsURI' | 'ePackageNsPrefix' | 'quality-metric' | 'model';
		@Override public ParserRule getRule() { return rule; }
		
		//'eClassifier' | 'ePackageName' | 'ePackageNsURI' | 'ePackageNsPrefix' | 'quality-metric' | 'model'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'eClassifier'
		public Keyword getEClassifierKeyword_0() { return cEClassifierKeyword_0; }
		
		//'ePackageName'
		public Keyword getEPackageNameKeyword_1() { return cEPackageNameKeyword_1; }
		
		//'ePackageNsURI'
		public Keyword getEPackageNsURIKeyword_2() { return cEPackageNsURIKeyword_2; }
		
		//'ePackageNsPrefix'
		public Keyword getEPackageNsPrefixKeyword_3() { return cEPackageNsPrefixKeyword_3; }
		
		//'quality-metric'
		public Keyword getQualityMetricKeyword_4() { return cQualityMetricKeyword_4; }
		
		//'model'
		public Keyword getModelKeyword_5() { return cModelKeyword_5; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.Param");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIdKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAccessControlKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDescriptionKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExtensionKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cOperationKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cNameKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cUniqueNameKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cProjectKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cSizeKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//Param:
		//    'id' | 'accessControl' | 'description' | 'extension' | 'operation' | 'name' | 'unique-name' | 'project' | 'size';
		@Override public ParserRule getRule() { return rule; }
		
		//'id' | 'accessControl' | 'description' | 'extension' | 'operation' | 'name' | 'unique-name' | 'project' | 'size'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'id'
		public Keyword getIdKeyword_0() { return cIdKeyword_0; }
		
		//'accessControl'
		public Keyword getAccessControlKeyword_1() { return cAccessControlKeyword_1; }
		
		//'description'
		public Keyword getDescriptionKeyword_2() { return cDescriptionKeyword_2; }
		
		//'extension'
		public Keyword getExtensionKeyword_3() { return cExtensionKeyword_3; }
		
		//'operation'
		public Keyword getOperationKeyword_4() { return cOperationKeyword_4; }
		
		//'name'
		public Keyword getNameKeyword_5() { return cNameKeyword_5; }
		
		//'unique-name'
		public Keyword getUniqueNameKeyword_6() { return cUniqueNameKeyword_6; }
		
		//'project'
		public Keyword getProjectKeyword_7() { return cProjectKeyword_7; }
		
		//'size'
		public Keyword getSizeKeyword_8() { return cSizeKeyword_8; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		////DslParam:
		////    typeName=('id' | 'accessControl' | 'description' | 'ext' | 'operation' | 'name'| 'unique-name' | 'project'| 'size' );
		////--------------------------------------------
		//Variable:
		//    'var' name=ID '=' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID '=' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.query.QueryDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cVariableRefAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cVariableAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_3_1_0 = (CrossReference)cVariableAssignment_3_1.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_3_1_0_1 = (RuleCall)cVariableVariableCrossReference_3_1_0.eContents().get(1);
		
		//Expression:
		//    {IntConstant} value=INT |
		//    {StringConstant} value=STRING |
		//    {BoolConstant} value=('true' | 'false') |
		//    {VariableRef} variable=[Variable];
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=INT |
		//{StringConstant} value=STRING |
		//{BoolConstant} value=('true' | 'false') |
		//{VariableRef} variable=[Variable]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{StringConstant} value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringConstant}
		public Action getStringConstantAction_1_0() { return cStringConstantAction_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//{BoolConstant} value=('true' | 'false')
		public Group getGroup_2() { return cGroup_2; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_2_0() { return cBoolConstantAction_2_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }
		
		//{VariableRef} variable=[Variable]
		public Group getGroup_3() { return cGroup_3; }
		
		//{VariableRef}
		public Action getVariableRefAction_3_0() { return cVariableRefAction_3_0; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_3_1() { return cVariableAssignment_3_1; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_3_1_0() { return cVariableVariableCrossReference_3_1_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_3_1_0_1() { return cVariableVariableIDTerminalRuleCall_3_1_0_1; }
	}
	
	
	private final QueryModelElements pQueryModel;
	private final AbstractElementElements pAbstractElement;
	private final UserElements pUser;
	private final WorkspaceElements pWorkspace;
	private final ProjectElements pProject;
	private final MetamodelElements pMetamodel;
	private final ModelElements pModel;
	private final DslElements pDsl;
	private final MicroSyntaxElements pMicroSyntax;
	private final ModelQueryElements pModelQuery;
	private final QueryLangElements pQueryLang;
	private final FullTextSearchElements pFullTextSearch;
	private final QualityMetricElements pQualityMetric;
	private final TransformableElements pTransformable;
	private final TransParamElements pTransParam;
	private final QExpElements pQExp;
	private final QattributeElements pQattribute;
	private final OperatorElements pOperator;
	private final FilterElements pFilter;
	private final FilterExpElements pFilterExp;
	private final ComparisonElements pComparison;
	private final FilterKeywordElements pFilterKeyword;
	private final ArtifactTypeElements pArtifactType;
	private final UserVarElements pUserVar;
	private final WorkspaceVarElements pWorkspaceVar;
	private final ProjectVarElements pProjectVar;
	private final MetamodelVarElements pMetamodelVar;
	private final ModelVarElements pModelVar;
	private final DslVarElements pDslVar;
	private final UserFieldElements pUserField;
	private final WorkspaceFieldElements pWorkspaceField;
	private final ProjectFieldElements pProjectField;
	private final MetamodelFieldElements pMetamodelField;
	private final ModelFieldElements pModelField;
	private final DslFieldElements pDslField;
	private final UserParamElements pUserParam;
	private final WorkspaceParamElements pWorkspaceParam;
	private final ProjectParamElements pProjectParam;
	private final MetamodelParamElements pMetamodelParam;
	private final MetaParamElements pMetaParam;
	private final ParamElements pParam;
	private final VariableElements pVariable;
	private final ExpressionElements pExpression;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QueryDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pQueryModel = new QueryModelElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pUser = new UserElements();
		this.pWorkspace = new WorkspaceElements();
		this.pProject = new ProjectElements();
		this.pMetamodel = new MetamodelElements();
		this.pModel = new ModelElements();
		this.pDsl = new DslElements();
		this.pMicroSyntax = new MicroSyntaxElements();
		this.pModelQuery = new ModelQueryElements();
		this.pQueryLang = new QueryLangElements();
		this.pFullTextSearch = new FullTextSearchElements();
		this.pQualityMetric = new QualityMetricElements();
		this.pTransformable = new TransformableElements();
		this.pTransParam = new TransParamElements();
		this.pQExp = new QExpElements();
		this.pQattribute = new QattributeElements();
		this.pOperator = new OperatorElements();
		this.pFilter = new FilterElements();
		this.pFilterExp = new FilterExpElements();
		this.pComparison = new ComparisonElements();
		this.pFilterKeyword = new FilterKeywordElements();
		this.pArtifactType = new ArtifactTypeElements();
		this.pUserVar = new UserVarElements();
		this.pWorkspaceVar = new WorkspaceVarElements();
		this.pProjectVar = new ProjectVarElements();
		this.pMetamodelVar = new MetamodelVarElements();
		this.pModelVar = new ModelVarElements();
		this.pDslVar = new DslVarElements();
		this.pUserField = new UserFieldElements();
		this.pWorkspaceField = new WorkspaceFieldElements();
		this.pProjectField = new ProjectFieldElements();
		this.pMetamodelField = new MetamodelFieldElements();
		this.pModelField = new ModelFieldElements();
		this.pDslField = new DslFieldElements();
		this.pUserParam = new UserParamElements();
		this.pWorkspaceParam = new WorkspaceParamElements();
		this.pProjectParam = new ProjectParamElements();
		this.pMetamodelParam = new MetamodelParamElements();
		this.pMetaParam = new MetaParamElements();
		this.pParam = new ParamElements();
		this.pVariable = new VariableElements();
		this.pExpression = new ExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.arsene.query.QueryDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//QueryModel:
	//    elements+=AbstractElement*;
	public QueryModelElements getQueryModelAccess() {
		return pQueryModel;
	}
	
	public ParserRule getQueryModelRule() {
		return getQueryModelAccess().getRule();
	}
	
	//AbstractElement:
	//    Variable | User | Workspace | Project | Metamodel | Model | Dsl;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//User:
	//    'Query' 'User' '(' uservar=UserVar (',' uservars+=UserVar)* ')'
	//    'return' '[' field=UserField (',' fields+=UserField)*']';
	public UserElements getUserAccess() {
		return pUser;
	}
	
	public ParserRule getUserRule() {
		return getUserAccess().getRule();
	}
	
	//Workspace:
	//    'Query' 'Workspace' '(' spacevar=WorkspaceVar (',' spacevars+=WorkspaceVar)* ')'
	//    'return' '[' field=WorkspaceField (',' fields+=WorkspaceField)*']';
	public WorkspaceElements getWorkspaceAccess() {
		return pWorkspace;
	}
	
	public ParserRule getWorkspaceRule() {
		return getWorkspaceAccess().getRule();
	}
	
	//Project:
	//    'Query' 'Project' '(' projectvar=ProjectVar (',' projectvars+=ProjectVar)* ')'
	//    'return' '[' field=ProjectField (',' fields+=ProjectField)*']';
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//Metamodel:
	//    'Query' 'Metamodel' '(' metamodelVar=MetamodelVar (',' metamodelVars+=MetamodelVar)* ')'
	//    ('=>' (syntax=MicroSyntax | textSearch=FullTextSearch | filter=Filter | qm=QualityMetric | transfo=Transformable))*
	//    'return' '[' field=MetamodelField (',' fields+=MetamodelField)* ']';
	public MetamodelElements getMetamodelAccess() {
		return pMetamodel;
	}
	
	public ParserRule getMetamodelRule() {
		return getMetamodelAccess().getRule();
	}
	
	//Model:
	//    'Query' 'Model' '(' modelVar=ModelVar (',' modelVars+=ModelVar)* ')'
	//    ('=>' (syntax=MicroSyntax | textSearch=FullTextSearch | filter=Filter | q=ModelQuery))*
	//    'return' '[' field=ModelField (',' fields+=ModelField)* ']';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Dsl:
	//    'Query' 'Dsl' '(' dslVar=DslVar (',' dslVars+=DslVar)* ')'
	//    ('=>' (syntax=MicroSyntax | textSearch=FullTextSearch | filter=Filter))*
	//    'return' '[' field=DslField (',' fields+=DslField)* ']';
	public DslElements getDslAccess() {
		return pDsl;
	}
	
	public ParserRule getDslRule() {
		return getDslAccess().getRule();
	}
	
	////    ('=>' (syntx=MicroSyntax | textSearch=FullTextSearch | filter=Filter | qm=QualityMetric | transfo=Transformable)?)*
	//MicroSyntax:
	//    'microSyntax' '(' exp=Expression ')';
	public MicroSyntaxElements getMicroSyntaxAccess() {
		return pMicroSyntax;
	}
	
	public ParserRule getMicroSyntaxRule() {
		return getMicroSyntaxAccess().getRule();
	}
	
	//ModelQuery:
	//    'modelQuery' '(' 'type' ':' QueryLang ',' expr=Expression ')';
	public ModelQueryElements getModelQueryAccess() {
		return pModelQuery;
	}
	
	public ParserRule getModelQueryRule() {
		return getModelQueryAccess().getRule();
	}
	
	//QueryLang:
	//    'EOL' | 'OCL';
	public QueryLangElements getQueryLangAccess() {
		return pQueryLang;
	}
	
	public ParserRule getQueryLangRule() {
		return getQueryLangAccess().getRule();
	}
	
	//FullTextSearch:
	//    'fullTextSearch' '(' exp=Expression (',' exps+=Expression)* (',' 'min_match' ':' INT | ',' 'operator' ':'
	//    op=Operator)? ')';
	public FullTextSearchElements getFullTextSearchAccess() {
		return pFullTextSearch;
	}
	
	public ParserRule getFullTextSearchRule() {
		return getFullTextSearchAccess().getRule();
	}
	
	//QualityMetric:
	//    'qualityMetrics' '(' qExp=QExp (operator=Operator qExps=QExp)* ')';
	public QualityMetricElements getQualityMetricAccess() {
		return pQualityMetric;
	}
	
	public ParserRule getQualityMetricRule() {
		return getQualityMetricAccess().getRule();
	}
	
	//Transformable:
	//    'transformable' '(' (param=TransParam ':' exp=Expression) (',' param=TransParam ':' exp=Expression)? ')';
	public TransformableElements getTransformableAccess() {
		return pTransformable;
	}
	
	public ParserRule getTransformableRule() {
		return getTransformableAccess().getRule();
	}
	
	//TransParam:
	//    type=('id' | 'name');
	public TransParamElements getTransParamAccess() {
		return pTransParam;
	}
	
	public ParserRule getTransParamRule() {
		return getTransParamAccess().getRule();
	}
	
	//QExp:
	//    qAttr=Qattribute comp=Comparison n=INT;
	public QExpElements getQExpAccess() {
		return pQExp;
	}
	
	public ParserRule getQExpRule() {
		return getQExpAccess().getRule();
	}
	
	//Qattribute:
	//    type=('qa' | 'qb' | 'qc' | 'qd' | 'qe' | 'qf' | 'qg' | 'qh' | 'qi' | 'qj' | 'qk' | 'ql' | 'qm' | 'qn' | 'qo' | 'qp'
	//    | 'qq' | 'qr' | 'qs' | 'qt' | 'qu' | 'qv');
	public QattributeElements getQattributeAccess() {
		return pQattribute;
	}
	
	public ParserRule getQattributeRule() {
		return getQattributeAccess().getRule();
	}
	
	//Operator:
	//    op=('AND' | 'OR'| 'EXACT');
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Filter:
	//    'filter' '(' (filterExp=FilterExp)? (',' filterExps=FilterExp)? (',' 'size' ':' comp=Comparison exp=Expression) ')';
	public FilterElements getFilterAccess() {
		return pFilter;
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}
	
	//FilterExp:
	//    filterkey=FilterKeyword ':' exp=Expression;
	public FilterExpElements getFilterExpAccess() {
		return pFilterExp;
	}
	
	public ParserRule getFilterExpRule() {
		return getFilterExpAccess().getRule();
	}
	
	//Comparison:
	//    type=('==' | '>=' | '<=' | '<' | '>');
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//FilterKeyword:
	//    type=('gte' | 'lte' | 'lt' | 'gt');
	public FilterKeywordElements getFilterKeywordAccess() {
		return pFilterKeyword;
	}
	
	public ParserRule getFilterKeywordRule() {
		return getFilterKeywordAccess().getRule();
	}
	
	//// ------------------------------------------------------------
	//ArtifactType:
	//    typeName=('Model' | 'Metamodel' | 'Dsl');
	public ArtifactTypeElements getArtifactTypeAccess() {
		return pArtifactType;
	}
	
	public ParserRule getArtifactTypeRule() {
		return getArtifactTypeAccess().getRule();
	}
	
	//// Object vars
	//UserVar:
	//    UserParam ':' exp=Expression;
	public UserVarElements getUserVarAccess() {
		return pUserVar;
	}
	
	public ParserRule getUserVarRule() {
		return getUserVarAccess().getRule();
	}
	
	//WorkspaceVar:
	//    WorkspaceParam ':' exp=Expression;
	public WorkspaceVarElements getWorkspaceVarAccess() {
		return pWorkspaceVar;
	}
	
	public ParserRule getWorkspaceVarRule() {
		return getWorkspaceVarAccess().getRule();
	}
	
	//ProjectVar:
	//    ProjectParam ':' exp=Expression;
	public ProjectVarElements getProjectVarAccess() {
		return pProjectVar;
	}
	
	public ParserRule getProjectVarRule() {
		return getProjectVarAccess().getRule();
	}
	
	//MetamodelVar:
	//    MetamodelParam ':' exp=Expression;
	public MetamodelVarElements getMetamodelVarAccess() {
		return pMetamodelVar;
	}
	
	public ParserRule getMetamodelVarRule() {
		return getMetamodelVarAccess().getRule();
	}
	
	//ModelVar:
	//    Param ':' exp=Expression;
	public ModelVarElements getModelVarAccess() {
		return pModelVar;
	}
	
	public ParserRule getModelVarRule() {
		return getModelVarAccess().getRule();
	}
	
	//DslVar:
	//    Param ':' exp=Expression;
	public DslVarElements getDslVarAccess() {
		return pDslVar;
	}
	
	public ParserRule getDslVarRule() {
		return getDslVarAccess().getRule();
	}
	
	//// Object fields
	//UserField:
	//    typeName=('id' | 'username' | 'email' | 'createdAt' | 'updatedAt');
	public UserFieldElements getUserFieldAccess() {
		return pUserField;
	}
	
	public ParserRule getUserFieldRule() {
		return getUserFieldAccess().getRule();
	}
	
	//WorkspaceField:
	//    typeName=('id' | 'name' | 'description' | 'owner' | 'projects' | 'createdAt' | 'updatedAt');
	public WorkspaceFieldElements getWorkspaceFieldAccess() {
		return pWorkspaceField;
	}
	
	public ParserRule getWorkspaceFieldRule() {
		return getWorkspaceFieldAccess().getRule();
	}
	
	//ProjectField:
	//    typeName=('id' | 'name' | 'description' | 'user' | 'workspace' | 'sharedUser' | 'comments' | 'createdAt' |
	//    'updatedAt');
	public ProjectFieldElements getProjectFieldAccess() {
		return pProjectField;
	}
	
	public ParserRule getProjectFieldRule() {
		return getProjectFieldAccess().getRule();
	}
	
	////ArtifactField:
	////    MetamodelField | ModelField | DslField
	////    ;
	//MetamodelField:
	//    typeName=('id' | 'accessControl' | 'description' | 'ePackage' | 'ext' | 'involvedOperations' | 'metrics' | 'models'
	//    | 'license' | 'metamodel' | 'name' | 'project' | 'size' | 'storageUrl' | 'type' | 'unique_name' | 'createdAt' |
	//    'updatedAt');
	public MetamodelFieldElements getMetamodelFieldAccess() {
		return pMetamodelField;
	}
	
	public ParserRule getMetamodelFieldRule() {
		return getMetamodelFieldAccess().getRule();
	}
	
	//ModelField:
	//    typeName=('id' | 'accessControl' | 'description' | 'ext' | 'involvedOperations' | 'license' | 'metamodel' | 'name' |
	//    'project' | 'size' | 'storageUrl' | 'type' | 'unique_name' | 'createdAt' | 'updatedAt');
	public ModelFieldElements getModelFieldAccess() {
		return pModelField;
	}
	
	public ParserRule getModelFieldRule() {
		return getModelFieldAccess().getRule();
	}
	
	//DslField:
	//    typeName=('id' | 'accessControl' | 'description' | 'ext' | 'involvedOperations' | 'license' | 'name' | 'project' |
	//    'size' | 'storageUrl' | 'type' | 'unique_name' | 'createdAt' | 'updatedAt');
	public DslFieldElements getDslFieldAccess() {
		return pDslField;
	}
	
	public ParserRule getDslFieldRule() {
		return getDslFieldAccess().getRule();
	}
	
	//// Object Params
	//UserParam:
	//    typeName=('username' | 'userId' | 'email');
	public UserParamElements getUserParamAccess() {
		return pUserParam;
	}
	
	public ParserRule getUserParamRule() {
		return getUserParamAccess().getRule();
	}
	
	//WorkspaceParam:
	//    typeName=('owner' | 'workspaceId');
	public WorkspaceParamElements getWorkspaceParamAccess() {
		return pWorkspaceParam;
	}
	
	public ParserRule getWorkspaceParamRule() {
		return getWorkspaceParamAccess().getRule();
	}
	
	//ProjectParam:
	//    typeName=('username' | 'userId' | 'workspaceId' | 'projectId');
	public ProjectParamElements getProjectParamAccess() {
		return pProjectParam;
	}
	
	public ParserRule getProjectParamRule() {
		return getProjectParamAccess().getRule();
	}
	
	////ArtifactParam:
	////    MetamodelParam ; // | DslParam;
	//MetamodelParam:
	//    MetaParam | Param;
	public MetamodelParamElements getMetamodelParamAccess() {
		return pMetamodelParam;
	}
	
	public ParserRule getMetamodelParamRule() {
		return getMetamodelParamAccess().getRule();
	}
	
	//MetaParam:
	//    'eClassifier' | 'ePackageName' | 'ePackageNsURI' | 'ePackageNsPrefix' | 'quality-metric' | 'model';
	public MetaParamElements getMetaParamAccess() {
		return pMetaParam;
	}
	
	public ParserRule getMetaParamRule() {
		return getMetaParamAccess().getRule();
	}
	
	//Param:
	//    'id' | 'accessControl' | 'description' | 'extension' | 'operation' | 'name' | 'unique-name' | 'project' | 'size';
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	////DslParam:
	////    typeName=('id' | 'accessControl' | 'description' | 'ext' | 'operation' | 'name'| 'unique-name' | 'project'| 'size' );
	////--------------------------------------------
	//Variable:
	//    'var' name=ID '=' expression=Expression;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Expression:
	//    {IntConstant} value=INT |
	//    {StringConstant} value=STRING |
	//    {BoolConstant} value=('true' | 'false') |
	//    {VariableRef} variable=[Variable];
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
