/*
 * generated by Xtext 2.25.0
 */
package com.arsene.dsl.query.serializer;

import com.arsene.dsl.query.queryDsl.And;
import com.arsene.dsl.query.queryDsl.ArithmeticSigned;
import com.arsene.dsl.query.queryDsl.Assignment;
import com.arsene.dsl.query.queryDsl.BoolConstant;
import com.arsene.dsl.query.queryDsl.Comparison;
import com.arsene.dsl.query.queryDsl.Equality;
import com.arsene.dsl.query.queryDsl.Expo;
import com.arsene.dsl.query.queryDsl.IntConstant;
import com.arsene.dsl.query.queryDsl.Minus;
import com.arsene.dsl.query.queryDsl.Mod;
import com.arsene.dsl.query.queryDsl.Model;
import com.arsene.dsl.query.queryDsl.MulOrDiv;
import com.arsene.dsl.query.queryDsl.Not;
import com.arsene.dsl.query.queryDsl.Or;
import com.arsene.dsl.query.queryDsl.Plus;
import com.arsene.dsl.query.queryDsl.Primary;
import com.arsene.dsl.query.queryDsl.PrintCommand;
import com.arsene.dsl.query.queryDsl.QueryDslPackage;
import com.arsene.dsl.query.queryDsl.StringConstant;
import com.arsene.dsl.query.queryDsl.VarRef;
import com.arsene.dsl.query.queryDsl.VariableDeclaration;
import com.arsene.dsl.query.services.QueryDslGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class QueryDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private QueryDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == QueryDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QueryDslPackage.AND:
				sequence_And(context, (And) semanticObject); 
				return; 
			case QueryDslPackage.ARITHMETIC_SIGNED:
				sequence_Prefixed(context, (ArithmeticSigned) semanticObject); 
				return; 
			case QueryDslPackage.ASSIGNMENT:
				sequence_Assignment(context, (Assignment) semanticObject); 
				return; 
			case QueryDslPackage.BOOL_CONSTANT:
				sequence_Atomic(context, (BoolConstant) semanticObject); 
				return; 
			case QueryDslPackage.COMPARISON:
				sequence_Comparison(context, (Comparison) semanticObject); 
				return; 
			case QueryDslPackage.EQUALITY:
				sequence_Equality(context, (Equality) semanticObject); 
				return; 
			case QueryDslPackage.EXPO:
				sequence_Expo(context, (Expo) semanticObject); 
				return; 
			case QueryDslPackage.INT_CONSTANT:
				sequence_Atomic(context, (IntConstant) semanticObject); 
				return; 
			case QueryDslPackage.MINUS:
				sequence_PlusOrMinus(context, (Minus) semanticObject); 
				return; 
			case QueryDslPackage.MOD:
				sequence_Mod(context, (Mod) semanticObject); 
				return; 
			case QueryDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case QueryDslPackage.MUL_OR_DIV:
				sequence_MulOrDiv(context, (MulOrDiv) semanticObject); 
				return; 
			case QueryDslPackage.NOT:
				sequence_Prefixed(context, (Not) semanticObject); 
				return; 
			case QueryDslPackage.OR:
				sequence_Or(context, (Or) semanticObject); 
				return; 
			case QueryDslPackage.PLUS:
				sequence_PlusOrMinus(context, (Plus) semanticObject); 
				return; 
			case QueryDslPackage.PRIMARY:
				sequence_Atomic(context, (Primary) semanticObject); 
				return; 
			case QueryDslPackage.PRINT_COMMAND:
				sequence_GlobalCommand(context, (PrintCommand) semanticObject); 
				return; 
			case QueryDslPackage.STRING_CONSTANT:
				sequence_Atomic(context, (StringConstant) semanticObject); 
				return; 
			case QueryDslPackage.VAR_REF:
				sequence_VarRef(context, (VarRef) semanticObject); 
				return; 
			case QueryDslPackage.VARIABLE_DECLARATION:
				sequence_VariableDeclaration(context, (VariableDeclaration) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Expression returns And
	 *     Or returns And
	 *     Or.Or_1_0 returns And
	 *     And returns And
	 *     And.And_1_0 returns And
	 *
	 * Constraint:
	 *     (left=And_And_1_0 right=Equality)
	 */
	protected void sequence_And(ISerializationContext context, And semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.AND__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.AND__LEFT));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.AND__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.AND__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAndAccess().getAndLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Assignment
	 *     Assignment returns Assignment
	 *
	 * Constraint:
	 *     (v=VarRef exp=Expression)
	 */
	protected void sequence_Assignment(ISerializationContext context, Assignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.ASSIGNMENT__V) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.ASSIGNMENT__V));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.ASSIGNMENT__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.ASSIGNMENT__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignmentAccess().getVVarRefParserRuleCall_0_0(), semanticObject.getV());
		feeder.accept(grammarAccess.getAssignmentAccess().getExpExpressionParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns BoolConstant
	 *     Or returns BoolConstant
	 *     Or.Or_1_0 returns BoolConstant
	 *     And returns BoolConstant
	 *     And.And_1_0 returns BoolConstant
	 *     Equality returns BoolConstant
	 *     Equality.Equality_1_0 returns BoolConstant
	 *     Comparison returns BoolConstant
	 *     Comparison.Comparison_1_0 returns BoolConstant
	 *     PlusOrMinus returns BoolConstant
	 *     PlusOrMinus.Plus_1_0_0_0 returns BoolConstant
	 *     PlusOrMinus.Minus_1_0_1_0 returns BoolConstant
	 *     Mod returns BoolConstant
	 *     Mod.Mod_1_0_0 returns BoolConstant
	 *     MulOrDiv returns BoolConstant
	 *     MulOrDiv.MulOrDiv_1_0_0 returns BoolConstant
	 *     Expo returns BoolConstant
	 *     Expo.Expo_1_0_0 returns BoolConstant
	 *     Prefixed returns BoolConstant
	 *     Atomic returns BoolConstant
	 *
	 * Constraint:
	 *     (value='true' | value='false')
	 */
	protected void sequence_Atomic(ISerializationContext context, BoolConstant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns IntConstant
	 *     Or returns IntConstant
	 *     Or.Or_1_0 returns IntConstant
	 *     And returns IntConstant
	 *     And.And_1_0 returns IntConstant
	 *     Equality returns IntConstant
	 *     Equality.Equality_1_0 returns IntConstant
	 *     Comparison returns IntConstant
	 *     Comparison.Comparison_1_0 returns IntConstant
	 *     PlusOrMinus returns IntConstant
	 *     PlusOrMinus.Plus_1_0_0_0 returns IntConstant
	 *     PlusOrMinus.Minus_1_0_1_0 returns IntConstant
	 *     Mod returns IntConstant
	 *     Mod.Mod_1_0_0 returns IntConstant
	 *     MulOrDiv returns IntConstant
	 *     MulOrDiv.MulOrDiv_1_0_0 returns IntConstant
	 *     Expo returns IntConstant
	 *     Expo.Expo_1_0_0 returns IntConstant
	 *     Prefixed returns IntConstant
	 *     Atomic returns IntConstant
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Atomic(ISerializationContext context, IntConstant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.INT_CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.INT_CONSTANT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_1_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Primary
	 *     Or returns Primary
	 *     Or.Or_1_0 returns Primary
	 *     And returns Primary
	 *     And.And_1_0 returns Primary
	 *     Equality returns Primary
	 *     Equality.Equality_1_0 returns Primary
	 *     Comparison returns Primary
	 *     Comparison.Comparison_1_0 returns Primary
	 *     PlusOrMinus returns Primary
	 *     PlusOrMinus.Plus_1_0_0_0 returns Primary
	 *     PlusOrMinus.Minus_1_0_1_0 returns Primary
	 *     Mod returns Primary
	 *     Mod.Mod_1_0_0 returns Primary
	 *     MulOrDiv returns Primary
	 *     MulOrDiv.MulOrDiv_1_0_0 returns Primary
	 *     Expo returns Primary
	 *     Expo.Expo_1_0_0 returns Primary
	 *     Prefixed returns Primary
	 *     Atomic returns Primary
	 *
	 * Constraint:
	 *     expr=Expression
	 */
	protected void sequence_Atomic(ISerializationContext context, Primary semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.PRIMARY__EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.PRIMARY__EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getExprExpressionParserRuleCall_0_2_0(), semanticObject.getExpr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns StringConstant
	 *     Or returns StringConstant
	 *     Or.Or_1_0 returns StringConstant
	 *     And returns StringConstant
	 *     And.And_1_0 returns StringConstant
	 *     Equality returns StringConstant
	 *     Equality.Equality_1_0 returns StringConstant
	 *     Comparison returns StringConstant
	 *     Comparison.Comparison_1_0 returns StringConstant
	 *     PlusOrMinus returns StringConstant
	 *     PlusOrMinus.Plus_1_0_0_0 returns StringConstant
	 *     PlusOrMinus.Minus_1_0_1_0 returns StringConstant
	 *     Mod returns StringConstant
	 *     Mod.Mod_1_0_0 returns StringConstant
	 *     MulOrDiv returns StringConstant
	 *     MulOrDiv.MulOrDiv_1_0_0 returns StringConstant
	 *     Expo returns StringConstant
	 *     Expo.Expo_1_0_0 returns StringConstant
	 *     Prefixed returns StringConstant
	 *     Atomic returns StringConstant
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_Atomic(ISerializationContext context, StringConstant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.STRING_CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.STRING_CONSTANT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_3_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Comparison
	 *     Or returns Comparison
	 *     Or.Or_1_0 returns Comparison
	 *     And returns Comparison
	 *     And.And_1_0 returns Comparison
	 *     Equality returns Comparison
	 *     Equality.Equality_1_0 returns Comparison
	 *     Comparison returns Comparison
	 *     Comparison.Comparison_1_0 returns Comparison
	 *
	 * Constraint:
	 *     (left=Comparison_Comparison_1_0 (op='>=' | op='<=' | op='>' | op='<') right=PlusOrMinus)
	 */
	protected void sequence_Comparison(ISerializationContext context, Comparison semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Equality
	 *     Or returns Equality
	 *     Or.Or_1_0 returns Equality
	 *     And returns Equality
	 *     And.And_1_0 returns Equality
	 *     Equality returns Equality
	 *     Equality.Equality_1_0 returns Equality
	 *
	 * Constraint:
	 *     (left=Equality_Equality_1_0 (op='==' | op='!=') right=Comparison)
	 */
	protected void sequence_Equality(ISerializationContext context, Equality semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expo
	 *     Or returns Expo
	 *     Or.Or_1_0 returns Expo
	 *     And returns Expo
	 *     And.And_1_0 returns Expo
	 *     Equality returns Expo
	 *     Equality.Equality_1_0 returns Expo
	 *     Comparison returns Expo
	 *     Comparison.Comparison_1_0 returns Expo
	 *     PlusOrMinus returns Expo
	 *     PlusOrMinus.Plus_1_0_0_0 returns Expo
	 *     PlusOrMinus.Minus_1_0_1_0 returns Expo
	 *     Mod returns Expo
	 *     Mod.Mod_1_0_0 returns Expo
	 *     MulOrDiv returns Expo
	 *     MulOrDiv.MulOrDiv_1_0_0 returns Expo
	 *     Expo returns Expo
	 *     Expo.Expo_1_0_0 returns Expo
	 *
	 * Constraint:
	 *     (left=Expo_Expo_1_0_0 op='^' right=Prefixed)
	 */
	protected void sequence_Expo(ISerializationContext context, Expo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.EXPO__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.EXPO__LEFT));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.EXPO__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.EXPO__OP));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.EXPO__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.EXPO__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpoAccess().getExpoLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpoAccess().getOpCircumflexAccentKeyword_1_0_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getExpoAccess().getRightPrefixedParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns PrintCommand
	 *     GlobalCommand returns PrintCommand
	 *
	 * Constraint:
	 *     params+=Expression
	 */
	protected void sequence_GlobalCommand(ISerializationContext context, PrintCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Mod
	 *     Or returns Mod
	 *     Or.Or_1_0 returns Mod
	 *     And returns Mod
	 *     And.And_1_0 returns Mod
	 *     Equality returns Mod
	 *     Equality.Equality_1_0 returns Mod
	 *     Comparison returns Mod
	 *     Comparison.Comparison_1_0 returns Mod
	 *     PlusOrMinus returns Mod
	 *     PlusOrMinus.Plus_1_0_0_0 returns Mod
	 *     PlusOrMinus.Minus_1_0_1_0 returns Mod
	 *     Mod returns Mod
	 *     Mod.Mod_1_0_0 returns Mod
	 *
	 * Constraint:
	 *     (left=Mod_Mod_1_0_0 op='mod' right=MulOrDiv)
	 */
	protected void sequence_Mod(ISerializationContext context, Mod semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.MOD__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.MOD__LEFT));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.MOD__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.MOD__OP));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.MOD__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.MOD__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModAccess().getModLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getModAccess().getOpModKeyword_1_0_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getModAccess().getRightMulOrDivParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     instructions+=Instruction+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns MulOrDiv
	 *     Or returns MulOrDiv
	 *     Or.Or_1_0 returns MulOrDiv
	 *     And returns MulOrDiv
	 *     And.And_1_0 returns MulOrDiv
	 *     Equality returns MulOrDiv
	 *     Equality.Equality_1_0 returns MulOrDiv
	 *     Comparison returns MulOrDiv
	 *     Comparison.Comparison_1_0 returns MulOrDiv
	 *     PlusOrMinus returns MulOrDiv
	 *     PlusOrMinus.Plus_1_0_0_0 returns MulOrDiv
	 *     PlusOrMinus.Minus_1_0_1_0 returns MulOrDiv
	 *     Mod returns MulOrDiv
	 *     Mod.Mod_1_0_0 returns MulOrDiv
	 *     MulOrDiv returns MulOrDiv
	 *     MulOrDiv.MulOrDiv_1_0_0 returns MulOrDiv
	 *
	 * Constraint:
	 *     (left=MulOrDiv_MulOrDiv_1_0_0 (op='*' | op='/') right=Expo)
	 */
	protected void sequence_MulOrDiv(ISerializationContext context, MulOrDiv semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Or
	 *     Or returns Or
	 *     Or.Or_1_0 returns Or
	 *
	 * Constraint:
	 *     (left=Or_Or_1_0 right=And)
	 */
	protected void sequence_Or(ISerializationContext context, Or semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.OR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.OR__LEFT));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.OR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.OR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOrAccess().getOrLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Minus
	 *     Or returns Minus
	 *     Or.Or_1_0 returns Minus
	 *     And returns Minus
	 *     And.And_1_0 returns Minus
	 *     Equality returns Minus
	 *     Equality.Equality_1_0 returns Minus
	 *     Comparison returns Minus
	 *     Comparison.Comparison_1_0 returns Minus
	 *     PlusOrMinus returns Minus
	 *     PlusOrMinus.Plus_1_0_0_0 returns Minus
	 *     PlusOrMinus.Minus_1_0_1_0 returns Minus
	 *
	 * Constraint:
	 *     (left=PlusOrMinus_Minus_1_0_1_0 right=Mod)
	 */
	protected void sequence_PlusOrMinus(ISerializationContext context, Minus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.MINUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.MINUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.MINUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.MINUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getMinusLeftAction_1_0_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getRightModParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Plus
	 *     Or returns Plus
	 *     Or.Or_1_0 returns Plus
	 *     And returns Plus
	 *     And.And_1_0 returns Plus
	 *     Equality returns Plus
	 *     Equality.Equality_1_0 returns Plus
	 *     Comparison returns Plus
	 *     Comparison.Comparison_1_0 returns Plus
	 *     PlusOrMinus returns Plus
	 *     PlusOrMinus.Plus_1_0_0_0 returns Plus
	 *     PlusOrMinus.Minus_1_0_1_0 returns Plus
	 *
	 * Constraint:
	 *     (left=PlusOrMinus_Plus_1_0_0_0 right=Mod)
	 */
	protected void sequence_PlusOrMinus(ISerializationContext context, Plus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getPlusLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getRightModParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ArithmeticSigned
	 *     Or returns ArithmeticSigned
	 *     Or.Or_1_0 returns ArithmeticSigned
	 *     And returns ArithmeticSigned
	 *     And.And_1_0 returns ArithmeticSigned
	 *     Equality returns ArithmeticSigned
	 *     Equality.Equality_1_0 returns ArithmeticSigned
	 *     Comparison returns ArithmeticSigned
	 *     Comparison.Comparison_1_0 returns ArithmeticSigned
	 *     PlusOrMinus returns ArithmeticSigned
	 *     PlusOrMinus.Plus_1_0_0_0 returns ArithmeticSigned
	 *     PlusOrMinus.Minus_1_0_1_0 returns ArithmeticSigned
	 *     Mod returns ArithmeticSigned
	 *     Mod.Mod_1_0_0 returns ArithmeticSigned
	 *     MulOrDiv returns ArithmeticSigned
	 *     MulOrDiv.MulOrDiv_1_0_0 returns ArithmeticSigned
	 *     Expo returns ArithmeticSigned
	 *     Expo.Expo_1_0_0 returns ArithmeticSigned
	 *     Prefixed returns ArithmeticSigned
	 *
	 * Constraint:
	 *     expression=Atomic
	 */
	protected void sequence_Prefixed(ISerializationContext context, ArithmeticSigned semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.ARITHMETIC_SIGNED__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.ARITHMETIC_SIGNED__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrefixedAccess().getExpressionAtomicParserRuleCall_1_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Not
	 *     Or returns Not
	 *     Or.Or_1_0 returns Not
	 *     And returns Not
	 *     And.And_1_0 returns Not
	 *     Equality returns Not
	 *     Equality.Equality_1_0 returns Not
	 *     Comparison returns Not
	 *     Comparison.Comparison_1_0 returns Not
	 *     PlusOrMinus returns Not
	 *     PlusOrMinus.Plus_1_0_0_0 returns Not
	 *     PlusOrMinus.Minus_1_0_1_0 returns Not
	 *     Mod returns Not
	 *     Mod.Mod_1_0_0 returns Not
	 *     MulOrDiv returns Not
	 *     MulOrDiv.MulOrDiv_1_0_0 returns Not
	 *     Expo returns Not
	 *     Expo.Expo_1_0_0 returns Not
	 *     Prefixed returns Not
	 *
	 * Constraint:
	 *     expression=Atomic
	 */
	protected void sequence_Prefixed(ISerializationContext context, Not semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.NOT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.NOT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrefixedAccess().getExpressionAtomicParserRuleCall_0_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VarRef returns VarRef
	 *     Expression returns VarRef
	 *     Or returns VarRef
	 *     Or.Or_1_0 returns VarRef
	 *     And returns VarRef
	 *     And.And_1_0 returns VarRef
	 *     Equality returns VarRef
	 *     Equality.Equality_1_0 returns VarRef
	 *     Comparison returns VarRef
	 *     Comparison.Comparison_1_0 returns VarRef
	 *     PlusOrMinus returns VarRef
	 *     PlusOrMinus.Plus_1_0_0_0 returns VarRef
	 *     PlusOrMinus.Minus_1_0_1_0 returns VarRef
	 *     Mod returns VarRef
	 *     Mod.Mod_1_0_0 returns VarRef
	 *     MulOrDiv returns VarRef
	 *     MulOrDiv.MulOrDiv_1_0_0 returns VarRef
	 *     Expo returns VarRef
	 *     Expo.Expo_1_0_0 returns VarRef
	 *     Prefixed returns VarRef
	 *     Atomic returns VarRef
	 *
	 * Constraint:
	 *     ref=[VariableDeclaration|ID]
	 */
	protected void sequence_VarRef(ISerializationContext context, VarRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QueryDslPackage.Literals.VAR_REF__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QueryDslPackage.Literals.VAR_REF__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarRefAccess().getRefVariableDeclarationIDTerminalRuleCall_0_1(), semanticObject.eGet(QueryDslPackage.Literals.VAR_REF__REF, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns VariableDeclaration
	 *     VariableDeclaration returns VariableDeclaration
	 *
	 * Constraint:
	 *     (name=ID initExp=Expression?)
	 */
	protected void sequence_VariableDeclaration(ISerializationContext context, VariableDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
