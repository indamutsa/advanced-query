# Build, Test, and Push Docker Images
name: Continuous Integration for the MDEForge-Search

on:
  push:
    branches:
      - main # or the branch you want to build on

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        esearch:
          - name: elasticsearch
            path: elastic-bundle/elasticsearch
            dockerfile: Dockerfile

    steps:
      # Checkout the repo
      - name: Checkout code
        uses: actions/checkout@v2

      # Get the short SHA, it will be used to tag the image
      - name: Get the short SHA
        run: echo "SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # Build the image
      - name: Set up Docker Buildx
        uses: actions/checkout@v3

      - name: Build ${{ matrix.esearch.name }}
        run: |
          IMAGE_NAME=${{ matrix.esearch.name }}
          IMAGE_TAG=${{ env.SHA }}
          docker build ./${{ matrix.esearch.path }} --tag $IMAGE_NAME:$IMAGE_TAG

      # Start the Elasticsearch container
      - name: Start Elasticsearch
        run: |
          docker run -d \
            --name ${{ matrix.esearch.name }} \
            -v elasticsearch:/usr/share/elasticsearch/data \
            -p 9200:9200 \
            -p 9300:9300 \
            -e "ES_JAVA_OPTS=-Xmx256m -Xms256m" \
            -e "discovery.type=single-node" \
            --health-cmd="curl --silent --fail http://localhost:9200/_cluster/health || exit 1" \
            --health-interval=30s \
            --health-timeout=30s \
            --health-retries=5 \
            --restart=on-failure \
            ${{ matrix.esearch.name }}:${{ env.SHA }}

      # Wait for Elasticsearch and test the endpoint
      - name: Wait for and Test Elasticsearch Endpoint
        run: |
          for i in {1..3}; do
            STATUS_CODE=$(curl -u elastic:changeme --write-out '%{http_code}' --silent --output /dev/null http://localhost:9200/_cluster/health)
            if [ "$STATUS_CODE" -eq 200 ]; then
              echo "Elasticsearch is up and running!"
              exit 0
            fi
            echo "Waiting for Elasticsearch... (Status code: $STATUS_CODE)"
            sleep 10
          done
          echo "Elasticsearch did not start in time or returned a non-200 status code: $STATUS_CODE"
          exit 1

      # # Log into Docker Hub
      # - name: Log into Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # # Push the image to Docker Hub
      # - name: Push ${{ matrix.esearch.name }}
      #   run: |
      #     IMAGE_NAME=my-image-${{ matrix.esearch.name }}
      #     IMAGE_TAG=${{ env.SHA }}
      #     IMAGE_ID=docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/$IMAGE_NAME
      #     docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_ID:$IMAGE_TAG
      #     docker push $IMAGE_ID:$IMAGE_TAG
